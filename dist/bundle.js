!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t),o.d(t,"floorBuilderMemory",(function(){return g})),o.d(t,"stage",(function(){return w})),o.d(t,"enemyStatsMemory",(function(){return v})),o.d(t,"playerStatsMemory",(function(){return b})),o.d(t,"promptControllerMemory",(function(){return H})),o.d(t,"combatControllerMemory",(function(){return S})),o.d(t,"dialoguebank",(function(){return k})),o.d(t,"showDialogue",(function(){return I}));var n=function(){function e(e){this.stage=e}return e.prototype.getCurrentStage=function(){return this.stage},e.prototype.setCurrentStage=function(e){this.stage=e},e.prototype.increaseCurrentStage=function(){this.stage=this.stage+1},e}(),r=function(e,t,o,n,r,a,i,l,u){this.playerHealth=e,this.playerDefense=t,this.playerStrength=o,this.playerDexterity=n,this.playerDefenseDebuff=r,this.playerStrengthDebuff=a,this.playerDexterityDebuff=i,this.playerSanity=l,this.playerMorality=u},a=function(e,t,o){this.allowPrompt=e,this.waitForAttack=t,this.textSpeed=o},i=function(e,t){this.enemyAttackStrength=e,this.attackStrength=t},l=function(e,t,o,n,r,a,i,l){this.enemyHealth=e,this.enemyDefense=t,this.enemyStrength=o,this.enemyDexterity=n,this.enemyOnScreen=r,this.itemToUse=a,this.potionBackOpen=i,this.rummageOpen=l},u=function(e,t,o,n,r,a,i,l,u,s,m){this.floor=e,this.previousFloor=t,this.enemy=o,this.previousEnemy=n,this.item=r,this.previousItem=a,this.move=i,this.previousMove=l,this.enemyIsAlive=u,this.itemIsOnGround=s,this.animation=m},s=function(){this.movingQuotes=["","You are still here. ","You have descended down. ","You found a hatch down. ","You fell through a hole you found. ","You went downstairs. ","You teleported down. ","You blinked and found yourself in a new place. ","You were knocked out and woke up somewhere else. ","You woke up, was it just a nightmare? Whatever it was, you are now in an unfamiliar place. ","You tripped on a rock and rolled downhill. ","Suddenly a monster grabbed you and threw you down. ","You wish upon a star to take you away from this nightmare, but it only took you further down. ","You snap out of it. ","The worst is still in front of you. ","You feel your mind detoriating as you move further down. ","Have you seen this place before? No, can't be... ","You prey nothing else will hurt you as you go down, your prayers remain unanswered.","Hope? You forgot what this word means. "],this.movingPlace=["","You are now in a dark cave. ","You are now in a horrific dungeon. ","You are now in a deep ravine. ","You are now in damp catacombs. ","You are surrounded by graves. ","You are in deserted ruins. ","You are in a dusty stronghold. ","You are next to a dark castle. ","You are near an underground river. "],this.actions=["","You see ","You fight ","You killed ","You have spared ","You were backstabbed by ","You have been killed by ","You pick up ","You equip ","You decided to ","You also see ","You are in front of ","On the ground there is ","You look in the mirror. ","You used ","You threw ","You don't have ","The hatch to the next level is locked, you need to defeat the enemy or possess a key to proceed. ","You attacked ","You got hit! ","You are dead, GAME OVER. ","The door didn't even require a key... the monster didn't even want to fight you... You have not descended into madness, you escaped this hell, you see an open field with sunshine, a rainbow and pleasant breeze, you survived, YOU WON!"],this.enemyForm=["","a noble Knight. ","a blood-covered Vampire. ","a brave Mercenary. ","a rotting Zombie. ","an evil Demon. ","a horrific Nightmare. ","a feral Beast. ","a beautiful Elf. ","a rattling Skeleton. "],this.itemForm=["","a sharp Sword. ","a solid Shield. ","a rusty Key. ","a shiny Ring. ","a Health Potion. ","a stray Soul. ","a Sanity Potion. ","a tough set of Armor. ","a pair of spiked Gloves. ","a steel Helmet. "],this.itemUsage=["","a sharp Sword, you hope it's stronger than your previous sword. ","a solid Shield, it seems good enough to keep you alive. ","a rusty Key, looks barely sturdy enough to open something. ","a shiny Ring, you feel prettier. ","a Health Potion, you feel rejuvenated. ","a stray Soul at your enemy, the soul tore through them. ","a Sanity Potion, you feel happier. Attached to the bottle there is a hand-drawn picture of a girl with a red ribbon taking her own life, with the words Happy Thoughts next to her, it seems the potion couldn't help her. ","a tough set of Armor, much better than the old rags you used to wear. ","a pair of spiked Gloves, these really pack a punch. ","a steel Helmet, it fills your with power! "],this.sanityPotionUsage=["","a Sanity Potion, you feel happier. Attached to the bottle there is a hand-drawn picture of a girl with a red ribbon taking her own life, with the words Happy Thoughts next to her, it seems the potion couldn't help her. ","a Sanity Potion, you began to smile again. ","a Sanity Potion, there is a poem attached to the label, the poem is about sunshine and rainclouds. ","a Sanity Potion, you cry tears of happiness. ","a Sanity Potion, i was half full... the stains on the label are tear stains, you hope those were tears of happiness. "],this.itemChoicePresented=["","What do you want to use? a [H]ealth Potion, a [S]anity Potion or the Stra[Y] Soul?","Are you sure you want to use the Rusty Key? It seems like you can just open the next extrance and escape without fighting the enemy. ","Are you sure you want to drink the Sanity Potion? The label says it will bring you back to your senses, but won't have much effect on a sane person. ","Are you sure you want to release the abandoned soul? It looks vengeful. ","Are you sure you want to drink the Health Potion? Are you desperate enough to use it now?"],this.defenseFormEnemy=["","He fell apart. ","A slight breeze would topple him over. ","It doesn't take much to take him down. ","He is quite frail. ","He can't survive a lot. ","His build is pretty average. ","He is pretty durable. ","He has a solid build. ","He is built like a tank. ","Pretty much nothing can even scratch him. ","He is indestructible. "],this.defenseFormPlayer=["","You fell apart. ","A slight breeze would topple you over. ","It doesn't take much to take you down. ","You are quite frail. ","You can't survive a lot. ","Your build is pretty average. ","You are pretty durable. ","You have a solid build. ","You are built like a tank. ","Pretty much nothing can even scratch you. ","You are indestructible. "],this.dexterityFormEnemy=["","He cannot move. ","He can barely move. ","He is slow. ","He lacks aristry. ","He isn't very fast. ","He has mediocre speed. ","His dexterity is above average. ","He is quite nimble. ","Nimble doesn't even begin to describe him. ","He is the definition of finesse. ","He is like the wind. "],this.dexterityFormPlayer=["","You cannot move. ","You can barely move. ","You are slow. ","You lack aristry. ","You aren't very fast. ","You have mediocre speed. ","Your dexterity is above average. ","You are quite nimble. ","Nimble doesn't even begin to describe you. ","You are the definition of finesse. ","You are like the wind. "],this.strengthFormEnemy=["","He has ceased to be. ","He is anemic. ","He is obviously weak. ","He is very skinny. ","He is slightly weak. ","He isn't especially strong. ","He has decent power. ","He has huge muscles. ","He can destroy anyone. ","He has the power of Hercules. ","He has the power of God. "],this.strengthFormPlayer=["","You are dead, GAME OVER. ","You are anemic. ","You are obviously weak. ","You are very skinny. ","You are slightly weak. ","You aren't especially strong. ","You have decent power. ","You have huge muscles. ","You can destroy anyone. ","You have the power of Hercules. ","You have the power of God. "],this.healthFormEnemy=["","He is dead. ","He has trouble keeping his eyes open, he feels himself drifting away into ether. ","His life flashes before his eyes, the death is near. ","He can barely move, he wonders why he even came here. ","He is gravely injured, he suffers from deep wounds. ","He has several broken bones. ","He is injured and limping. ","He has painful cuts on himself. ","He has bruises and scratches. ","He is slightly bruised. ","He doesn't look wounded. "],this.healthFormPlayer=["","You are dead, GAME OVER. ","You have trouble keeping his eyes open, you feel yourself drifting away into ether. ","Your life flashes before your eyes, the death is near. ","You can barely move, you wonder why you even came here. ","You are gravely injured, you suffer from blood loss. ","You are bleeding profusely. ","You are injured and bleeding from your cuts. ","You have painful cuts on yourself. ","You have bruises and scratches. ","You are slightly bruised. ","You don't look wounded. "],this.sanityFormPlayer=["","You have lost the will to live, you are dead inside and desire to be dead outside as well. ","You look at your reflection then burst into tears, you know you'll die here. ","You look like you have given up on life. ","The thousand-yard stare on your face is haunting. ","Your eyes are bloodshot, you are tired of this place. ","You are frowning. ","There is a smile on your face. ","You look confident. ","Despite being in this situation, you look like you are having fun. ","You look excited to go to the next room. ","Even if you die, you know you'll die happy, the journey was the destination for you. "],this.moralityFormPlayer=["","You take a glance at the mirror and quickly look away, but the image is seared into your eyes, it is your tortured soul in hell, you can no longer hold back your true self. ","Your face is dripping with blood, you look down and so are your hands, you can't accept the reality of it, no matter how hard you claw at your own hand the blood does not go away, no matter how hard you rub your eyes it just makes your eyesight more and more red. ","Your face is covered in blood, you look down and see your hands are dripping as well, you don't know why, but you just know it's not your blood, as soon as you blink your hands go back to normal. ","There is no question about it, the red stains on your face are blood, you try to rub your eyes with your hand, but it does not help. ","Your face seems to have red stains on it, but they disappear as soon as you blink. ","There is nothing else out of ordinary about your reflection. ","You take a peak at the mirror and you could've swore you saw a faint halo above your head, for split second, was it a delusion? Regardless, it fuels you with joy. ","The halo above your head is bright, the glow feels your heart with determination. ","The halo is clearly visible, you can even see a pair of wings behind your back. ","You can barely see yourself, the holy glow in the mirror is overwhelming you. ","You take a glance at the mirror and it almost blinds you, but you clearly saw the image of yourself in heaven, you are no longer afraid of death. "]},m=function(e,t,o){g.enemyIsAlive=!0,g.itemIsOnGround=!0,o.increaseCurrentStage(),g.floor=Math.floor(Math.random()*(k.movingPlace.length-1))+1,g.floor==g.previousFloor&&(g.floor=Math.floor(Math.random()*(k.movingPlace.length-1))+1),g.previousFloor=g.floor,g.enemy=Math.floor(Math.random()*(k.enemyForm.length-1))+1,g.enemy==g.previousEnemy&&(g.enemy=Math.floor(Math.random()*(k.enemyForm.length-1))+1),g.previousEnemy=g.enemy,g.item=Math.floor(Math.random()*(k.itemForm.length-1))+1,g.item==g.previousItem&&(g.item=Math.floor(Math.random()*(k.itemForm.length-1))+1),g.previousItem=g.item,g.move=Math.floor(Math.random()*(k.movingQuotes.length-1))+1,g.move==g.previousMove&&(g.move=Math.floor(Math.random()*(k.movingQuotes.length-1))+1),g.previousMove=g.move,v.enemyHealth=11,v.enemyDefense=Math.floor(Math.random()*o.getCurrentStage()*e)+2,v.enemyDefense>11&&(v.enemyDefense=11),v.enemyStrength=Math.floor(Math.random()*o.getCurrentStage()*e)+2,v.enemyStrength>11&&(v.enemyStrength=11),v.enemyDexterity=Math.floor(Math.random()*o.getCurrentStage()*e)+2,v.enemyDexterity>11&&(v.enemyDexterity=11),v.enemyHealth=Math.floor(3*Math.random())+9,v.enemyHealth>11&&(v.enemyHealth=11)},h=function(e,t,o,n){document.getElementById("enemy").src="gfx/enemies/"+e+".gif",document.getElementById("item").src="gfx/items/"+t+".png",document.getElementById("floor").src="gfx/floors/"+o+".png",document.getElementById("animation").src="gfx/animations/"+n+".gif"},y=new function(e,t,o,n,r,a,i,l,u,s,m){this.hasMirror=e,this.armorLevel=t,this.helmetLevel=o,this.glovesLevel=n,this.soulAmount=r,this.keyAmount=a,this.weaponLevel=i,this.healthPotionAmount=l,this.sanityPotionAmount=u,this.ringLevel=s,this.shieldLevel=m}(1,0,0,0,10,5,0,10,10,0,0),d=function(e,t,o,n,r,a,i,l,u,s,m){document.getElementById("HealthInventory").innerHTML=0!=i?1==i?"<u>"+i+" Health Potion</u></br> </br>":"<u>"+i+" Health Potions</u></br> </br>":"",document.getElementById("SanityInventory").innerHTML=0!=u?1==u?"<u>"+u+" Sanity Potion</u></br> </br>":"<u>"+u+" Sanity Potions</u></br> </br>":"",document.getElementById("SoulInventory").innerHTML=0!=l?1==l?"<u>"+l+" Stray Soul</u></br> </br>":"<u>"+l+" Stray Souls</u></br> </br>":"",document.getElementById("KeysInventory").innerHTML=0!=r?1==r?"<u>"+y.keyAmount+" Rusty Key</u></br> </br>":"<u>"+y.keyAmount+" Rusty Keys</u></br> </br>":"",0!=t?(b.playerDefense=6+y.armorLevel-b.playerDefenseDebuff,b.playerDefense>11&&(b.playerDefense=11),document.getElementById("ArmorInventory").innerHTML="<u>Tough Armor</u> - +"+y.armorLevel+" defense bonus. </br> </br>"):document.getElementById("ArmorInventory").innerHTML="<u>Cloak</u> - No bonuses. </br> </br>",document.getElementById("ShieldInventory").innerHTML=0!=m?"<u>Solid Shield</u> - "+y.shieldLevel+"0% enemy damage reduction. </br> </br>":"",document.getElementById("GlovesInventory").innerHTML=0!=n?"<u>Spiked Gloves</u> - "+y.glovesLevel+"0% additional damage. </br> </br>":"<u>Leather Gloves</u> - No bonuses. </br> </br>",0!=o?(b.playerStrength=6+y.helmetLevel-b.playerStrengthDebuff,b.playerStrength>11&&(b.playerStrength=11),document.getElementById("HelmetInventory").innerHTML="<u>Steel Helmet</u> - +"+y.helmetLevel+" strength bonus. </br> </br>"):document.getElementById("HelmetInventory").innerHTML="<u>Cloth Hood</u> - No bonuses. </br> </br>",0!=s?(b.playerDexterity=6+y.ringLevel-b.playerDexterityDebuff,b.playerDexterity>11&&(b.playerDexterity=11),document.getElementById("RingInventory").innerHTML="<u>Shiny Ring</u> - +"+y.ringLevel+" dexterity bonus. </br> </br>"):document.getElementById("RingInventory").innerHTML="",document.getElementById("WeaponInventory").innerHTML=0!=a?"<u>Sharp Sword</u> - "+y.weaponLevel+" attack power. </br> </br>":"<u>Fists</u> - 1 attack power.</br> </br>"};new d(y.hasMirror,y.armorLevel,y.helmetLevel,y.glovesLevel,y.keyAmount,y.weaponLevel,y.healthPotionAmount,y.soulAmount,y.sanityPotionAmount,y.ringLevel,y.shieldLevel);var c=function(e){switch(e){case"h":y.healthPotionAmount>=1?(v.enemyOnScreen=!1,new h(0,0,g.floor,5),I.showInfo_isItemUsed(),b.playerHealth=11,y.healthPotionAmount=y.healthPotionAmount-1):I.showInfo_isItemUnavailable();break;case"f":v.enemyOnScreen=!0,new h(g.enemy+10,0,g.floor,1),v.enemyHealth>=1&&(S.attackStrength=Math.round(y.weaponLevel+b.playerStrength-v.enemyDefense-v.enemyDexterity+.5*y.glovesLevel),S.attackStrength<1&&(S.attackStrength=1),console.log("Your power"+S.attackStrength),v.enemyHealth=v.enemyHealth-S.attackStrength,v.enemyHealth<2&&(v.enemyHealth=1)),I.showInfo_isSwordUsed(),H.waitForAttack=!0,setTimeout((function(){0==g.enemyIsAlive&&(H.waitForAttack=!1),1==g.enemyIsAlive&&(S.enemyAttackStrength=Math.round(v.enemyStrength-b.playerDefense/5-b.playerDexterity/5-.5*y.shieldLevel),console.log("Enemy power"+S.enemyAttackStrength),S.enemyAttackStrength<0&&(S.enemyAttackStrength=0),b.playerHealth=b.playerHealth-S.enemyAttackStrength,b.playerHealth<2&&(b.playerSanity>1?(b.playerHealth=3,b.playerSanity=b.playerSanity-1,console.log("Sanity Hit: Taken, current Sanity:"+b.playerSanity)):b.playerHealth=1),new h(g.enemy+10,0,g.floor,2),I.showInfo_isEnemyAttacking(),H.waitForAttack=!1)}),2e3);break;case"s":y.sanityPotionAmount>=1?(v.enemyOnScreen=!1,new h(0,0,g.floor,5),I.showInfo_isItemUsed(),b.playerSanity<6&&(b.playerSanity=6),b.playerSanity>=6&&(b.playerSanity=b.playerSanity+1),y.sanityPotionAmount=y.sanityPotionAmount-1):I.showInfo_isItemUnavailable();break;case"y":y.soulAmount>=1?(v.enemyOnScreen=!0,new h(g.enemy+10,0,g.floor,6),I.showInfo_isItemUsed(),v.enemyHealth>0&&(v.enemyHealth=v.enemyHealth-5,v.enemyHealth<2&&(v.enemyHealth=1)),y.soulAmount=y.soulAmount-1):I.showInfo_isItemUnavailable()}},f=function(e,t){var o,n;if(o=document.getElementById("written").value,n=document.getElementById("written"),document.getElementById("written").value=null,document.getElementById("written").placeholder="",console.log(o),1==H.allowPrompt&&0==H.waitForAttack)switch(o.charAt(0).toLowerCase()){case"d":v.enemyOnScreen=!1,100==e.getCurrentStage()&&(t.showInfo_isVictory(),H.allowPrompt=!1,H.waitForAttack=!0),1==g.enemyIsAlive&&y.keyAmount<1&&0!=e.getCurrentStage()&&100!=e.getCurrentStage()&&t.showInfo_isBlocked(),1==g.enemyIsAlive&&y.keyAmount>0&&100!=e.getCurrentStage()&&(y.keyAmount=y.keyAmount-1,new m(1,0,w),new h(0,0,g.floor,0),t.showInfo_isFloorShown()),0==g.enemyIsAlive&&100!=e.getCurrentStage()&&(new m(1,0,w),new h(0,0,g.floor,0),t.showInfo_isFloorShown());break;case"i":1==g.enemyIsAlive&&(0==v.enemyOnScreen&&(new h(g.enemy,0,g.floor,g.animation),t.showInfo_isEnemyShown()),1==v.enemyOnScreen&&t.showInfo_isEnemyShown(),v.enemyOnScreen=!0),0==g.enemyIsAlive&&t.showInfo_isEnemyShown();break;case"r":1==g.itemIsOnGround&&(v.enemyOnScreen=!1,v.rummageOpen=!0,new h(0,g.item,g.floor,g.animation),t.showInfo_isItemShown());break;case"c":t.showInfo_isPlayerStatShown();break;case"m":t.showInfo_isPlayerReflectionShown();break;case"f":new c("f");break;case"e":if(v.enemyOnScreen=!1,1==g.itemIsOnGround&&1==v.rummageOpen)switch(v.rummageOpen=!1,g.itemIsOnGround=!1,t.showInfo_isItemPickedUp(),new h(0,0,g.floor,0),g.item){case 1:y.weaponLevel<=10&&(y.weaponLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+2),y.weaponLevel>=10&&(y.weaponLevel=10));break;case 2:y.shieldLevel<=5&&(y.shieldLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+1),y.shieldLevel>=5&&(y.shieldLevel=5));break;case 3:y.keyAmount=y.keyAmount+1;break;case 4:y.ringLevel<=4&&(y.ringLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+1),y.ringLevel>=4&&(y.ringLevel=4));break;case 5:y.healthPotionAmount=y.healthPotionAmount+1;break;case 6:y.soulAmount=y.soulAmount+1;break;case 7:y.sanityPotionAmount=y.sanityPotionAmount+1;break;case 8:y.armorLevel<=4&&(y.armorLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+1),y.armorLevel>=4&&(y.armorLevel=4));break;case 9:y.glovesLevel<=5&&(y.glovesLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+1),y.glovesLevel>=5&&(y.glovesLevel=5));break;case 10:y.helmetLevel<=4&&(y.helmetLevel=Math.round(Math.floor(Math.random()*e.getCurrentStage())/2+1))}break;case"p":v.potionBackOpen=!0,t.showInfo_readyForPotionUsage();break;case"s":1==v.potionBackOpen&&(v.itemToUse=7,new c("s"),v.potionBackOpen=!1);break;case"y":1==v.potionBackOpen&&(v.itemToUse=6,new c("y"),v.potionBackOpen=!1);break;case"h":1==v.potionBackOpen&&(v.itemToUse=5,new c("h"),v.potionBackOpen=!1)}return new d(y.hasMirror,y.armorLevel,y.helmetLevel,y.glovesLevel,y.keyAmount,y.weaponLevel,y.healthPotionAmount,y.soulAmount,y.sanityPotionAmount,y.ringLevel,y.shieldLevel),v.enemyHealth<2&&(v.enemyHealth=1,g.enemyIsAlive=!1),n.focus(),o},p=function(){function e(){H.allowPrompt=!1;for(var e=function(e){setTimeout((function(){document.getElementById("info").innerHTML+=""[e]}),e*H.textSpeed)},t=0;t<"".length;t++)e(t);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),"".length*H.textSpeed)}return e.prototype.showInfo_isFloorShown=function(){document.getElementById("info").innerHTML=null;for(var e=k.movingQuotes[g.move]+k.movingPlace[g.floor]+k.actions[1]+k.enemyForm[g.enemy]+k.actions[10]+k.itemForm[g.item],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);H.allowPrompt=!1,console.log("no prompt"),console.log(H.textSpeed),setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isPlayerReflectionShown=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[13]+k.sanityFormPlayer[b.playerSanity],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isPlayerStatShown=function(){document.getElementById("info").innerHTML=null;for(var e=k.defenseFormPlayer[b.playerDefense]+k.strengthFormPlayer[b.playerStrength]+k.dexterityFormPlayer[b.playerDexterity]+k.healthFormPlayer[b.playerHealth],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isItemShown=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[12]+k.itemForm[g.item],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isEnemyShown=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[11]+k.enemyForm[g.enemy]+k.defenseFormEnemy[v.enemyDefense]+k.strengthFormEnemy[v.enemyStrength]+k.dexterityFormEnemy[v.enemyDexterity]+k.healthFormEnemy[v.enemyHealth],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isItemUsed=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[14]+k.itemUsage[v.itemToUse],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isItemUnavailable=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[16]+k.itemForm[v.itemToUse],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_readyForPotionUsage=function(){document.getElementById("info").innerHTML=null;for(var e=k.itemChoicePresented[1],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isItemPickedUp=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[7]+k.itemForm[g.item],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isBlocked=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[17],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isSwordUsed=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[18]+k.enemyForm[g.enemy]+k.healthFormEnemy[v.enemyHealth],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isEnemyAttacking=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[19]+k.healthFormPlayer[b.playerHealth],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isPlayerDead=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[20],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e.prototype.showInfo_isVictory=function(){document.getElementById("info").innerHTML=null;for(var e=k.actions[21],t=function(t){setTimeout((function(){document.getElementById("info").innerHTML+=e[t]}),t*H.textSpeed)},o=0;o<e.length;o++)t(o);setTimeout((function(){H.allowPrompt=!0,console.log("promptAllowed"),b.playerHealth<2&&(H.allowPrompt=!1,document.getElementById("info").innerHTML=k.actions[20])}),e.length*H.textSpeed)},e}(),g=new u(0,null,0,null,0,null,0,null,!1,!1,0),w=new n(1),v=new l(1,1,1,1,!1,0,!1,!1),b=new r(11,6,6,6,0,0,0,6,6),H=new a(!0,!1,10),S=new i(0,0),k=new s,I=new p;window.onload=function(){var e=document.getElementById("ambient");window.onmousedown=function(t){e.play()};var t=document.getElementById("proceed");null==t||t.addEventListener("click",(function(){new f(w,I)})),window.onkeydown=function(e){13==e.keyCode&&new f(w,I)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YWdlQWR2YW5jZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGxheWVyU3RhdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb21wdENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbWJhdENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZW15U3RhdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zsb29yQnVpbGRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGlhbG9ndWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NldEZsb29yLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hvd0dyYXBoaWNzLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnZlbnRvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsYXllckludmVudG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXNlSXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvbXB0Q2hlY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nob3dJbmZvLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInN0YWdlIiwidGhpcyIsImdldEN1cnJlbnRTdGFnZSIsInNldEN1cnJlbnRTdGFnZSIsImluY3JlYXNlQ3VycmVudFN0YWdlIiwicGxheWVySGVhbHRoIiwicGxheWVyRGVmZW5zZSIsInBsYXllclN0cmVuZ3RoIiwicGxheWVyRGV4dGVyaXR5IiwicGxheWVyRGVmZW5zZURlYnVmZiIsInBsYXllclN0cmVuZ3RoRGVidWZmIiwicGxheWVyRGV4dGVyaXR5RGVidWZmIiwicGxheWVyU2FuaXR5IiwicGxheWVyTW9yYWxpdHkiLCJhbGxvd1Byb21wdCIsIndhaXRGb3JBdHRhY2siLCJ0ZXh0U3BlZWQiLCJlbmVteUF0dGFja1N0cmVuZ3RoIiwiYXR0YWNrU3RyZW5ndGgiLCJlbmVteUhlYWx0aCIsImVuZW15RGVmZW5zZSIsImVuZW15U3RyZW5ndGgiLCJlbmVteURleHRlcml0eSIsImVuZW15T25TY3JlZW4iLCJpdGVtVG9Vc2UiLCJwb3Rpb25CYWNrT3BlbiIsInJ1bW1hZ2VPcGVuIiwiZmxvb3IiLCJwcmV2aW91c0Zsb29yIiwiZW5lbXkiLCJwcmV2aW91c0VuZW15IiwiaXRlbSIsInByZXZpb3VzSXRlbSIsIm1vdmUiLCJwcmV2aW91c01vdmUiLCJlbmVteUlzQWxpdmUiLCJpdGVtSXNPbkdyb3VuZCIsImFuaW1hdGlvbiIsIm1vdmluZ1F1b3RlcyIsIm1vdmluZ1BsYWNlIiwiYWN0aW9ucyIsImVuZW15Rm9ybSIsIml0ZW1Gb3JtIiwiaXRlbVVzYWdlIiwic2FuaXR5UG90aW9uVXNhZ2UiLCJpdGVtQ2hvaWNlUHJlc2VudGVkIiwiZGVmZW5zZUZvcm1FbmVteSIsImRlZmVuc2VGb3JtUGxheWVyIiwiZGV4dGVyaXR5Rm9ybUVuZW15IiwiZGV4dGVyaXR5Rm9ybVBsYXllciIsInN0cmVuZ3RoRm9ybUVuZW15Iiwic3RyZW5ndGhGb3JtUGxheWVyIiwiaGVhbHRoRm9ybUVuZW15IiwiaGVhbHRoRm9ybVBsYXllciIsInNhbml0eUZvcm1QbGF5ZXIiLCJtb3JhbGl0eUZvcm1QbGF5ZXIiLCJkaWZmaWN1bHR5IiwiaG9ycm9yIiwiY3VycmVudHN0YWdlIiwiZmxvb3JCdWlsZGVyTWVtb3J5IiwiTWF0aCIsInJhbmRvbSIsImRpYWxvZ3VlYmFuayIsImxlbmd0aCIsImVuZW15U3RhdHNNZW1vcnkiLCJzaG93bkVuZW15Iiwic2hvd25JdGVtIiwic2hvd25GbG9vciIsInNob3duQW5pbWF0aW9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNyYyIsInBsYXllckludmVudG9yeU1lbW9yeSIsImhhc01pcnJvciIsImFybW9yTGV2ZWwiLCJoZWxtZXRMZXZlbCIsImdsb3Zlc0xldmVsIiwic291bEFtb3VudCIsImtleUFtb3VudCIsIndlYXBvbkxldmVsIiwiaGVhbHRoUG90aW9uQW1vdW50Iiwic2FuaXR5UG90aW9uQW1vdW50IiwicmluZ0xldmVsIiwic2hpZWxkTGV2ZWwiLCJNaXJyb3IiLCJBcm1vciIsIkhlbG1ldCIsIkdsb3ZlcyIsIktleXMiLCJXZWFwb24iLCJIZWFsdGgiLCJTb3VscyIsIlNhbml0eSIsIlJpbmciLCJTaGllbGQiLCJpbm5lckhUTUwiLCJwbGF5ZXJTdGF0c01lbW9yeSIsIndoaWNoSXRlbSIsInNob3dHcmFwaGljcyIsInNob3dJbmZvX2lzSXRlbVVzZWQiLCJzaG93SW5mb19pc0l0ZW1VbmF2YWlsYWJsZSIsImNvbWJhdENvbnRyb2xsZXJNZW1vcnkiLCJyb3VuZCIsImNvbnNvbGUiLCJsb2ciLCJzaG93SW5mb19pc1N3b3JkVXNlZCIsInByb21wdENvbnRyb2xsZXJNZW1vcnkiLCJzZXRUaW1lb3V0Iiwic2hvd0luZm9faXNFbmVteUF0dGFja2luZyIsInNob3dEaWFsb2d1ZSIsInByb21wdCIsInByb21wdGVyIiwicGxhY2Vob2xkZXIiLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsInNob3dJbmZvX2lzVmljdG9yeSIsInNob3dJbmZvX2lzQmxvY2tlZCIsInNob3dJbmZvX2lzRmxvb3JTaG93biIsInNob3dJbmZvX2lzRW5lbXlTaG93biIsInNob3dJbmZvX2lzSXRlbVNob3duIiwic2hvd0luZm9faXNQbGF5ZXJTdGF0U2hvd24iLCJzaG93SW5mb19pc1BsYXllclJlZmxlY3Rpb25TaG93biIsInNob3dJbmZvX2lzSXRlbVBpY2tlZFVwIiwic2hvd0luZm9fcmVhZHlGb3JQb3Rpb25Vc2FnZSIsImZvY3VzIiwic2hvd0luZm8iLCJzaG93blRleHQiLCJzaG93SW5mb19pc1BsYXllckRlYWQiLCJmbG9vckJ1aWxkZXIiLCJzdGFnZUFkdmFuY2UiLCJlbmVteVN0YXRzIiwicGxheWVyU3RhdHMiLCJwcm9tcHRDb250cm9sbGVyIiwiY29tYmF0Q29udHJvbGxlciIsImRpYWxvZ3VlIiwid2luZG93Iiwib25sb2FkIiwiYW1iaWVudCIsIm9ubW91c2Vkb3duIiwibW91c2VFdmVudCIsInBsYXkiLCJwcm9jZWVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9ua2V5ZG93biIsImV2Iiwia2V5Q29kZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0Ms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dUksT0FBT1EsVUFBWSxTQUFDQyxHQUNFLElBQWRBLEVBQUdDLFNBQ0gsSUFBSSxFQUFZakosRUFBTyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgY2xhc3Mgc3RhZ2VBZHZhbmNle1xuXG4gICAgc3RhZ2U6IG51bWJlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzdGFnZTogbnVtYmVyKXtcbiAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50U3RhZ2UoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhZ2U7XG4gICAgfVxuICAgIHNldEN1cnJlbnRTdGFnZShzdGFnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICB0aGlzLnN0YWdlID0gc3RhZ2U7XG4gICAgfVxuICAgIGluY3JlYXNlQ3VycmVudFN0YWdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0YWdlID0gdGhpcy5zdGFnZSArIDE7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJkemlhxYJhXCIpO1xuICAgfVxuICAgXG59IiwiICAgIC8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG4gICAgLy9TdGF0aXN0aWNzIG92ZXJhbGxcblxuXG5cbmV4cG9ydCBjbGFzcyBwbGF5ZXJTdGF0c3tcblxuLypcbiAgICBsZXQgcGxheWVySGVhbHRoID0gMTE7XG4gICAgbGV0IHBsYXllckRlZmVuc2UgPSA2O1xuICAgIGxldCBwbGF5ZXJTdHJlbmd0aCA9IDY7XG4gICAgbGV0IHBsYXllckRleHRlcml0eSA9IDY7XG4gICAgbGV0IHBsYXllckRlZmVuc2VEZWJ1ZmYgPSAwO1xuICAgIGxldCBwbGF5ZXJTdHJlbmd0aERlYnVmZiA9IDA7XG4gICAgbGV0IHBsYXllckRleHRlcml0eURlYnVmZiA9IDA7XG4gICAgbGV0IHBsYXllclNhbml0eSA9IDY7XG4gICAgbGV0IHBsYXllck1vcmFsaXR5ID0gNjtcbiovXG5cbnBsYXllckhlYWx0aCA6IG51bWJlcjtcbnBsYXllckRlZmVuc2UgOiBudW1iZXI7XG5wbGF5ZXJTdHJlbmd0aCA6IG51bWJlcjtcbnBsYXllckRleHRlcml0eSA6IG51bWJlcjtcbnBsYXllckRlZmVuc2VEZWJ1ZmYgOiBudW1iZXI7XG5wbGF5ZXJTdHJlbmd0aERlYnVmZiA6IG51bWJlcjtcbnBsYXllckRleHRlcml0eURlYnVmZiA6IG51bWJlcjtcbnBsYXllclNhbml0eSA6IG51bWJlcjtcbnBsYXllck1vcmFsaXR5IDogbnVtYmVyO1xuXG5cblxuXG4gICAgY29uc3RydWN0b3IocGxheWVySGVhbHRoIDogbnVtYmVyLCBwbGF5ZXJEZWZlbnNlIDogbnVtYmVyLCBwbGF5ZXJTdHJlbmd0aCA6IG51bWJlciwgcGxheWVyRGV4dGVyaXR5IDogbnVtYmVyLCBwbGF5ZXJEZWZlbnNlRGVidWZmIDogbnVtYmVyLCBwbGF5ZXJTdHJlbmd0aERlYnVmZiA6IG51bWJlciwgcGxheWVyRGV4dGVyaXR5RGVidWZmIDogbnVtYmVyLCBwbGF5ZXJTYW5pdHkgOiBudW1iZXIsIHBsYXllck1vcmFsaXR5IDogbnVtYmVyKXtcbiAgICAgIHRoaXMucGxheWVySGVhbHRoID0gcGxheWVySGVhbHRoO1xuICAgICAgdGhpcy5wbGF5ZXJEZWZlbnNlID0gcGxheWVyRGVmZW5zZTtcbiAgICAgIHRoaXMucGxheWVyU3RyZW5ndGggPSBwbGF5ZXJTdHJlbmd0aDtcbiAgICAgIHRoaXMucGxheWVyRGV4dGVyaXR5ID0gcGxheWVyRGV4dGVyaXR5O1xuICAgICAgdGhpcy5wbGF5ZXJEZWZlbnNlRGVidWZmID0gcGxheWVyRGVmZW5zZURlYnVmZjtcbiAgICAgIHRoaXMucGxheWVyU3RyZW5ndGhEZWJ1ZmYgPSBwbGF5ZXJTdHJlbmd0aERlYnVmZjtcbiAgICAgIHRoaXMucGxheWVyRGV4dGVyaXR5RGVidWZmID0gcGxheWVyRGV4dGVyaXR5RGVidWZmO1xuICAgICAgdGhpcy5wbGF5ZXJTYW5pdHkgPSBwbGF5ZXJTYW5pdHk7XG4gICAgICB0aGlzLnBsYXllck1vcmFsaXR5ID0gcGxheWVyTW9yYWxpdHk7XG4gICAgfVxuIC8qXG4gICAgZ2V0Q3VycmVudFN0YWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWdlO1xuICAgIH1cbiAgICBzZXRDdXJyZW50U3RhZ2Uoc3RhZ2U6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgdGhpcy5zdGFnZSA9IHN0YWdlO1xuICAgIH1cbiAgICBpbmNyZWFzZUN1cnJlbnRTdGFnZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGFnZSA9IHRoaXMuc3RhZ2UgKyAxO1xuICAgICAgICBjb25zb2xlLmxvZyhcImR6aWHFgmFcIik7XG4gICB9XG4gICAqL1xufSIsImV4cG9ydCBjbGFzcyBwcm9tcHRDb250cm9sbGVye1xuXG5hbGxvd1Byb21wdCA6IGJvb2xlYW47XG53YWl0Rm9yQXR0YWNrIDogYm9vbGVhbjtcbnRleHRTcGVlZDogbnVtYmVyO1xuXG5cblxuY29uc3RydWN0b3IoYWxsb3dQcm9tcHQgOiBib29sZWFuLCB3YWl0Rm9yQXR0YWNrIDogYm9vbGVhbiwgdGV4dFNwZWVkOiBudW1iZXIpe1xudGhpcy5hbGxvd1Byb21wdCA9IGFsbG93UHJvbXB0O1xudGhpcy53YWl0Rm9yQXR0YWNrID0gIHdhaXRGb3JBdHRhY2s7XG50aGlzLnRleHRTcGVlZCA9IHRleHRTcGVlZDtcbiAgICB9XG4gLypcbiAgICBnZXRDdXJyZW50U3RhZ2UoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhZ2U7XG4gICAgfVxuICAgIHNldEN1cnJlbnRTdGFnZShzdGFnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICB0aGlzLnN0YWdlID0gc3RhZ2U7XG4gICAgfVxuICAgIGluY3JlYXNlQ3VycmVudFN0YWdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0YWdlID0gdGhpcy5zdGFnZSArIDE7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZHppYcWCYVwiKTtcbiAgIH1cbiAgICovXG59IiwiZXhwb3J0IGNsYXNzIGNvbWJhdENvbnRyb2xsZXJ7XG5cblxuZW5lbXlBdHRhY2tTdHJlbmd0aCA6IG51bWJlcjtcbmF0dGFja1N0cmVuZ3RoIDogbnVtYmVyO1xuXG5cbmNvbnN0cnVjdG9yKGVuZW15QXR0YWNrU3RyZW5ndGggOiBudW1iZXIsIGF0dGFja1N0cmVuZ3RoIDogbnVtYmVyKXtcbnRoaXMuZW5lbXlBdHRhY2tTdHJlbmd0aCA9IGVuZW15QXR0YWNrU3RyZW5ndGg7XG50aGlzLmF0dGFja1N0cmVuZ3RoID0gIGF0dGFja1N0cmVuZ3RoO1xuICAgIH1cbiAvKlxuICAgIGdldEN1cnJlbnRTdGFnZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFnZTtcbiAgICB9XG4gICAgc2V0Q3VycmVudFN0YWdlKHN0YWdlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcbiAgICB9XG4gICAgaW5jcmVhc2VDdXJyZW50U3RhZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhZ2UgPSB0aGlzLnN0YWdlICsgMTtcbiAgICAgICAgY29uc29sZS5sb2coXCJkemlhxYJhXCIpO1xuICAgfVxuICAgKi9cbn0iLCJleHBvcnQgY2xhc3MgZW5lbXlTdGF0c3tcblxuXG5lbmVteUhlYWx0aCA6IG51bWJlcjtcbmVuZW15RGVmZW5zZSA6IG51bWJlcjtcbmVuZW15U3RyZW5ndGggOiBudW1iZXI7XG5lbmVteURleHRlcml0eSA6IG51bWJlcjtcbmVuZW15T25TY3JlZW4gOiBib29sZWFuO1xuaXRlbVRvVXNlIDogbnVtYmVyO1xucG90aW9uQmFja09wZW4gOiBib29sZWFuO1xucnVtbWFnZU9wZW4gOiBib29sZWFuO1xuXG5cblxuXG4gICAgY29uc3RydWN0b3IoZW5lbXlIZWFsdGggOiBudW1iZXIsIGVuZW15RGVmZW5zZSA6IG51bWJlciwgZW5lbXlTdHJlbmd0aCA6IG51bWJlciwgZW5lbXlEZXh0ZXJpdHkgOiBudW1iZXIsIGVuZW15T25TY3JlZW4gOiBib29sZWFuLCBpdGVtVG9Vc2UgOiBudW1iZXIsIHBvdGlvbkJhY2tPcGVuIDogYm9vbGVhbiwgcnVtbWFnZU9wZW4gOiBib29sZWFuKXtcbiAgICAgIHRoaXMuZW5lbXlIZWFsdGggPSBlbmVteUhlYWx0aDtcbiAgICAgIHRoaXMuZW5lbXlEZWZlbnNlID0gZW5lbXlEZWZlbnNlO1xuICAgICAgdGhpcy5lbmVteVN0cmVuZ3RoID0gZW5lbXlTdHJlbmd0aDtcbiAgICAgIHRoaXMuZW5lbXlEZXh0ZXJpdHkgPSBlbmVteURleHRlcml0eTtcbiAgICAgIHRoaXMuZW5lbXlPblNjcmVlbiA9IGVuZW15T25TY3JlZW47XG4gICAgICB0aGlzLml0ZW1Ub1VzZSA9IGl0ZW1Ub1VzZTtcbiAgICAgIHRoaXMucG90aW9uQmFja09wZW4gPSBwb3Rpb25CYWNrT3BlbjtcbiAgICAgIHRoaXMucnVtbWFnZU9wZW4gPSBydW1tYWdlT3BlbjtcbiAgICB9XG4gLypcbiAgICBnZXRDdXJyZW50U3RhZ2UoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhZ2U7XG4gICAgfVxuICAgIHNldEN1cnJlbnRTdGFnZShzdGFnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICB0aGlzLnN0YWdlID0gc3RhZ2U7XG4gICAgfVxuICAgIGluY3JlYXNlQ3VycmVudFN0YWdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0YWdlID0gdGhpcy5zdGFnZSArIDE7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZHppYcWCYVwiKTtcbiAgIH1cbiAgICovXG59IiwiXG5cblxuXG4gICAgLy9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cbiAgICAvL0NsYXNzIGJ1aWxkaW5nIHRoZSBGbG9vci5cblxuICAgXG5cblxuZXhwb3J0IGNsYXNzIGZsb29yQnVpbGRlcntcblxuXG5mbG9vciA6IG51bWJlcjtcbnByZXZpb3VzRmxvb3I6IG51bWJlcjtcbmVuZW15IDogbnVtYmVyO1xucHJldmlvdXNFbmVteSA6IG51bWJlcjtcbml0ZW0gOiBudW1iZXI7XG5wcmV2aW91c0l0ZW06IG51bWJlcjtcbm1vdmUgOiBudW1iZXI7XG5wcmV2aW91c01vdmU6IG51bWJlcjtcbmVuZW15SXNBbGl2ZTogYm9vbGVhbjtcbml0ZW1Jc09uR3JvdW5kOiBib29sZWFuO1xuYW5pbWF0aW9uOiBudW1iZXI7XG5cblxuY29uc3RydWN0b3IoZmxvb3IgOiBudW1iZXIsIHByZXZpb3VzRmxvb3I6IG51bWJlciwgZW5lbXkgOiBudW1iZXIsIHByZXZpb3VzRW5lbXkgOiBudW1iZXIsIGl0ZW0gOiBudW1iZXIsIHByZXZpb3VzSXRlbTogbnVtYmVyLCBtb3ZlIDogbnVtYmVyLCBwcmV2aW91c01vdmU6IG51bWJlciwgZW5lbXlJc0FsaXZlOiBib29sZWFuLCBpdGVtSXNPbkdyb3VuZDogYm9vbGVhbiwgYW5pbWF0aW9uOiBudW1iZXIpe1xuXG50aGlzLmZsb29yID0gZmxvb3I7XG50aGlzLnByZXZpb3VzRmxvb3IgPSBwcmV2aW91c0Zsb29yO1xudGhpcy5lbmVteSA9IGVuZW15O1xudGhpcy5wcmV2aW91c0VuZW15ID0gcHJldmlvdXNFbmVteTtcbnRoaXMuaXRlbSA9IGl0ZW07XG50aGlzLnByZXZpb3VzSXRlbSA9IHByZXZpb3VzSXRlbTtcbnRoaXMubW92ZSA9IG1vdmU7XG50aGlzLnByZXZpb3VzTW92ZSA9IHByZXZpb3VzTW92ZTtcbnRoaXMuZW5lbXlJc0FsaXZlID0gZW5lbXlJc0FsaXZlO1xudGhpcy5pdGVtSXNPbkdyb3VuZCA9IGl0ZW1Jc09uR3JvdW5kO1xudGhpcy5hbmltYXRpb24gPSBhbmltYXRpb247XG4gICAgfVxuIC8qXG4gICAgZ2V0Q3VycmVudFN0YWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWdlO1xuICAgIH1cbiAgICBzZXRDdXJyZW50U3RhZ2Uoc3RhZ2U6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgdGhpcy5zdGFnZSA9IHN0YWdlO1xuICAgIH1cbiAgICBpbmNyZWFzZUN1cnJlbnRTdGFnZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGFnZSA9IHRoaXMuc3RhZ2UgKyAxO1xuICAgICAgICBjb25zb2xlLmxvZyhcImR6aWHFgmFcIik7XG4gICB9XG4gICAqL1xuXG5cbn0iLCJcbiAgICAvL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuICAgIC8vQWxsIFRleHQgaW4gdGhlIGdhbWUuXG5cblxuXG5cbmV4cG9ydCBjbGFzcyBkaWFsb2d1ZXtcblxuICAgIG1vdmluZ1F1b3RlcyA6IHN0cmluZ1tdO1xuICAgIG1vdmluZ1BsYWNlIDogc3RyaW5nW107XG4gICAgYWN0aW9ucyA6IHN0cmluZ1tdO1xuICAgIGVuZW15Rm9ybSA6IHN0cmluZ1tdO1xuICAgIGl0ZW1Gb3JtIDogc3RyaW5nW107XG4gICAgaXRlbVVzYWdlIDogc3RyaW5nW107XG4gICAgc2FuaXR5UG90aW9uVXNhZ2UgOiBzdHJpbmdbXTtcbiAgICBpdGVtQ2hvaWNlUHJlc2VudGVkOiBzdHJpbmdbXTtcbiAgICBkZWZlbnNlRm9ybUVuZW15IDogc3RyaW5nW107XG4gICAgZGVmZW5zZUZvcm1QbGF5ZXIgOiBzdHJpbmdbXTtcbiAgICBkZXh0ZXJpdHlGb3JtRW5lbXkgOiBzdHJpbmdbXTtcbiAgICBkZXh0ZXJpdHlGb3JtUGxheWVyIDogc3RyaW5nW107XG4gICAgc3RyZW5ndGhGb3JtRW5lbXkgOiBzdHJpbmdbXTtcbiAgICBzdHJlbmd0aEZvcm1QbGF5ZXIgOiBzdHJpbmdbXTtcbiAgICBoZWFsdGhGb3JtRW5lbXkgOiBzdHJpbmdbXTtcbiAgICBoZWFsdGhGb3JtUGxheWVyIDogc3RyaW5nW107XG4gICAgc2FuaXR5Rm9ybVBsYXllciA6IHN0cmluZ1tdO1xuICAgIG1vcmFsaXR5Rm9ybVBsYXllciA6IHN0cmluZ1tdO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuXG4gICAgICAgIHRoaXMubW92aW5nUXVvdGVzID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBzdGlsbCBoZXJlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGhhdmUgZGVzY2VuZGVkIGRvd24uIFwiLFxuICAgICAgICAgICAgXCJZb3UgZm91bmQgYSBoYXRjaCBkb3duLiBcIixcbiAgICAgICAgICAgIFwiWW91IGZlbGwgdGhyb3VnaCBhIGhvbGUgeW91IGZvdW5kLiBcIixcbiAgICAgICAgICAgIFwiWW91IHdlbnQgZG93bnN0YWlycy4gXCIsXG4gICAgICAgICAgICBcIllvdSB0ZWxlcG9ydGVkIGRvd24uIFwiLFxuICAgICAgICAgICAgXCJZb3UgYmxpbmtlZCBhbmQgZm91bmQgeW91cnNlbGYgaW4gYSBuZXcgcGxhY2UuIFwiLFxuICAgICAgICAgICAgXCJZb3Ugd2VyZSBrbm9ja2VkIG91dCBhbmQgd29rZSB1cCBzb21ld2hlcmUgZWxzZS4gXCIsXG4gICAgICAgICAgICBcIllvdSB3b2tlIHVwLCB3YXMgaXQganVzdCBhIG5pZ2h0bWFyZT8gV2hhdGV2ZXIgaXQgd2FzLCB5b3UgYXJlIG5vdyBpbiBhbiB1bmZhbWlsaWFyIHBsYWNlLiBcIixcbiAgICAgICAgICAgIFwiWW91IHRyaXBwZWQgb24gYSByb2NrIGFuZCByb2xsZWQgZG93bmhpbGwuIFwiLFxuICAgICAgICAgICAgXCJTdWRkZW5seSBhIG1vbnN0ZXIgZ3JhYmJlZCB5b3UgYW5kIHRocmV3IHlvdSBkb3duLiBcIixcbiAgICAgICAgICAgIFwiWW91IHdpc2ggdXBvbiBhIHN0YXIgdG8gdGFrZSB5b3UgYXdheSBmcm9tIHRoaXMgbmlnaHRtYXJlLCBidXQgaXQgb25seSB0b29rIHlvdSBmdXJ0aGVyIGRvd24uIFwiLFxuICAgICAgICAgICAgXCJZb3Ugc25hcCBvdXQgb2YgaXQuIFwiLFxuICAgICAgICAgICAgXCJUaGUgd29yc3QgaXMgc3RpbGwgaW4gZnJvbnQgb2YgeW91LiBcIixcbiAgICAgICAgICAgIFwiWW91IGZlZWwgeW91ciBtaW5kIGRldG9yaWF0aW5nIGFzIHlvdSBtb3ZlIGZ1cnRoZXIgZG93bi4gXCIsXG4gICAgICAgICAgICBcIkhhdmUgeW91IHNlZW4gdGhpcyBwbGFjZSBiZWZvcmU/IE5vLCBjYW4ndCBiZS4uLiBcIixcbiAgICAgICAgICAgIFwiWW91IHByZXkgbm90aGluZyBlbHNlIHdpbGwgaHVydCB5b3UgYXMgeW91IGdvIGRvd24sIHlvdXIgcHJheWVycyByZW1haW4gdW5hbnN3ZXJlZC5cIixcbiAgICAgICAgICAgIFwiSG9wZT8gWW91IGZvcmdvdCB3aGF0IHRoaXMgd29yZCBtZWFucy4gXCIsXG4gICAgICAgIF1cbiAgICAgICAgdGhpcy5tb3ZpbmdQbGFjZSA9IFtcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgbm93IGluIGEgZGFyayBjYXZlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBub3cgaW4gYSBob3JyaWZpYyBkdW5nZW9uLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBub3cgaW4gYSBkZWVwIHJhdmluZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgbm93IGluIGRhbXAgY2F0YWNvbWJzLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBzdXJyb3VuZGVkIGJ5IGdyYXZlcy4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgaW4gZGVzZXJ0ZWQgcnVpbnMuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIGluIGEgZHVzdHkgc3Ryb25naG9sZC4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgbmV4dCB0byBhIGRhcmsgY2FzdGxlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBuZWFyIGFuIHVuZGVyZ3JvdW5kIHJpdmVyLiBcIixcbiAgICAgICAgXVxuICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJZb3Ugc2VlIFwiLFxuICAgICAgICAgICAgXCJZb3UgZmlnaHQgXCIsXG4gICAgICAgICAgICBcIllvdSBraWxsZWQgXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIHNwYXJlZCBcIixcbiAgICAgICAgICAgIFwiWW91IHdlcmUgYmFja3N0YWJiZWQgYnkgXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIGJlZW4ga2lsbGVkIGJ5IFwiLFxuICAgICAgICAgICAgXCJZb3UgcGljayB1cCBcIixcbiAgICAgICAgICAgIFwiWW91IGVxdWlwIFwiLFxuICAgICAgICAgICAgXCJZb3UgZGVjaWRlZCB0byBcIixcbiAgICAgICAgICAgIFwiWW91IGFsc28gc2VlIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIGluIGZyb250IG9mIFwiLFxuICAgICAgICAgICAgXCJPbiB0aGUgZ3JvdW5kIHRoZXJlIGlzIFwiLFxuICAgICAgICAgICAgXCJZb3UgbG9vayBpbiB0aGUgbWlycm9yLiBcIixcbiAgICAgICAgICAgIFwiWW91IHVzZWQgXCIsXG4gICAgICAgICAgICBcIllvdSB0aHJldyBcIixcbiAgICAgICAgICAgIFwiWW91IGRvbid0IGhhdmUgXCIsXG4gICAgICAgICAgICBcIlRoZSBoYXRjaCB0byB0aGUgbmV4dCBsZXZlbCBpcyBsb2NrZWQsIHlvdSBuZWVkIHRvIGRlZmVhdCB0aGUgZW5lbXkgb3IgcG9zc2VzcyBhIGtleSB0byBwcm9jZWVkLiBcIixcbiAgICAgICAgICAgIFwiWW91IGF0dGFja2VkIFwiLFxuICAgICAgICAgICAgXCJZb3UgZ290IGhpdCEgXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgZGVhZCwgR0FNRSBPVkVSLiBcIixcbiAgICAgICAgICAgIFwiVGhlIGRvb3IgZGlkbid0IGV2ZW4gcmVxdWlyZSBhIGtleS4uLiB0aGUgbW9uc3RlciBkaWRuJ3QgZXZlbiB3YW50IHRvIGZpZ2h0IHlvdS4uLiBZb3UgaGF2ZSBub3QgZGVzY2VuZGVkIGludG8gbWFkbmVzcywgeW91IGVzY2FwZWQgdGhpcyBoZWxsLCB5b3Ugc2VlIGFuIG9wZW4gZmllbGQgd2l0aCBzdW5zaGluZSwgYSByYWluYm93IGFuZCBwbGVhc2FudCBicmVlemUsIHlvdSBzdXJ2aXZlZCwgWU9VIFdPTiFcIlxuICAgICAgICBdXG4gICAgICAgIHRoaXMuZW5lbXlGb3JtID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiYSBub2JsZSBLbmlnaHQuIFwiLFxuICAgICAgICAgICAgXCJhIGJsb29kLWNvdmVyZWQgVmFtcGlyZS4gXCIsXG4gICAgICAgICAgICBcImEgYnJhdmUgTWVyY2VuYXJ5LiBcIixcbiAgICAgICAgICAgIFwiYSByb3R0aW5nIFpvbWJpZS4gXCIsXG4gICAgICAgICAgICBcImFuIGV2aWwgRGVtb24uIFwiLFxuICAgICAgICAgICAgXCJhIGhvcnJpZmljIE5pZ2h0bWFyZS4gXCIsXG4gICAgICAgICAgICBcImEgZmVyYWwgQmVhc3QuIFwiLFxuICAgICAgICAgICAgXCJhIGJlYXV0aWZ1bCBFbGYuIFwiLFxuICAgICAgICAgICAgXCJhIHJhdHRsaW5nIFNrZWxldG9uLiBcIixcbiAgICAgICAgXVxuICAgICAgICB0aGlzLml0ZW1Gb3JtID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiYSBzaGFycCBTd29yZC4gXCIsXG4gICAgICAgICAgICBcImEgc29saWQgU2hpZWxkLiBcIixcbiAgICAgICAgICAgIFwiYSBydXN0eSBLZXkuIFwiLFxuICAgICAgICAgICAgXCJhIHNoaW55IFJpbmcuIFwiLFxuICAgICAgICAgICAgXCJhIEhlYWx0aCBQb3Rpb24uIFwiLFxuICAgICAgICAgICAgXCJhIHN0cmF5IFNvdWwuIFwiLFxuICAgICAgICAgICAgXCJhIFNhbml0eSBQb3Rpb24uIFwiLFxuICAgICAgICAgICAgXCJhIHRvdWdoIHNldCBvZiBBcm1vci4gXCIsXG4gICAgICAgICAgICBcImEgcGFpciBvZiBzcGlrZWQgR2xvdmVzLiBcIixcbiAgICAgICAgICAgIFwiYSBzdGVlbCBIZWxtZXQuIFwiLFxuICAgICAgICBdXG4gICAgXG4gICAgICAgIHRoaXMuaXRlbVVzYWdlID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiYSBzaGFycCBTd29yZCwgeW91IGhvcGUgaXQncyBzdHJvbmdlciB0aGFuIHlvdXIgcHJldmlvdXMgc3dvcmQuIFwiLFxuICAgICAgICAgICAgXCJhIHNvbGlkIFNoaWVsZCwgaXQgc2VlbXMgZ29vZCBlbm91Z2ggdG8ga2VlcCB5b3UgYWxpdmUuIFwiLFxuICAgICAgICAgICAgXCJhIHJ1c3R5IEtleSwgbG9va3MgYmFyZWx5IHN0dXJkeSBlbm91Z2ggdG8gb3BlbiBzb21ldGhpbmcuIFwiLFxuICAgICAgICAgICAgXCJhIHNoaW55IFJpbmcsIHlvdSBmZWVsIHByZXR0aWVyLiBcIixcbiAgICAgICAgICAgIFwiYSBIZWFsdGggUG90aW9uLCB5b3UgZmVlbCByZWp1dmVuYXRlZC4gXCIsXG4gICAgICAgICAgICBcImEgc3RyYXkgU291bCBhdCB5b3VyIGVuZW15LCB0aGUgc291bCB0b3JlIHRocm91Z2ggdGhlbS4gXCIsXG4gICAgICAgICAgICBcImEgU2FuaXR5IFBvdGlvbiwgeW91IGZlZWwgaGFwcGllci4gQXR0YWNoZWQgdG8gdGhlIGJvdHRsZSB0aGVyZSBpcyBhIGhhbmQtZHJhd24gcGljdHVyZSBvZiBhIGdpcmwgd2l0aCBhIHJlZCByaWJib24gdGFraW5nIGhlciBvd24gbGlmZSwgd2l0aCB0aGUgd29yZHMgSGFwcHkgVGhvdWdodHMgbmV4dCB0byBoZXIsIGl0IHNlZW1zIHRoZSBwb3Rpb24gY291bGRuJ3QgaGVscCBoZXIuIFwiLFxuICAgICAgICAgICAgXCJhIHRvdWdoIHNldCBvZiBBcm1vciwgbXVjaCBiZXR0ZXIgdGhhbiB0aGUgb2xkIHJhZ3MgeW91IHVzZWQgdG8gd2Vhci4gXCIsXG4gICAgICAgICAgICBcImEgcGFpciBvZiBzcGlrZWQgR2xvdmVzLCB0aGVzZSByZWFsbHkgcGFjayBhIHB1bmNoLiBcIixcbiAgICAgICAgICAgIFwiYSBzdGVlbCBIZWxtZXQsIGl0IGZpbGxzIHlvdXIgd2l0aCBwb3dlciEgXCIsXG4gICAgICAgIF1cbiAgICBcbiAgICBcbiAgICAgICAgdGhpcy5zYW5pdHlQb3Rpb25Vc2FnZSA9IFtcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBcImEgU2FuaXR5IFBvdGlvbiwgeW91IGZlZWwgaGFwcGllci4gQXR0YWNoZWQgdG8gdGhlIGJvdHRsZSB0aGVyZSBpcyBhIGhhbmQtZHJhd24gcGljdHVyZSBvZiBhIGdpcmwgd2l0aCBhIHJlZCByaWJib24gdGFraW5nIGhlciBvd24gbGlmZSwgd2l0aCB0aGUgd29yZHMgSGFwcHkgVGhvdWdodHMgbmV4dCB0byBoZXIsIGl0IHNlZW1zIHRoZSBwb3Rpb24gY291bGRuJ3QgaGVscCBoZXIuIFwiLFxuICAgICAgICAgICAgXCJhIFNhbml0eSBQb3Rpb24sIHlvdSBiZWdhbiB0byBzbWlsZSBhZ2Fpbi4gXCIsXG4gICAgICAgICAgICBcImEgU2FuaXR5IFBvdGlvbiwgdGhlcmUgaXMgYSBwb2VtIGF0dGFjaGVkIHRvIHRoZSBsYWJlbCwgdGhlIHBvZW0gaXMgYWJvdXQgc3Vuc2hpbmUgYW5kIHJhaW5jbG91ZHMuIFwiLFxuICAgICAgICAgICAgXCJhIFNhbml0eSBQb3Rpb24sIHlvdSBjcnkgdGVhcnMgb2YgaGFwcGluZXNzLiBcIixcbiAgICAgICAgICAgIFwiYSBTYW5pdHkgUG90aW9uLCBpIHdhcyBoYWxmIGZ1bGwuLi4gdGhlIHN0YWlucyBvbiB0aGUgbGFiZWwgYXJlIHRlYXIgc3RhaW5zLCB5b3UgaG9wZSB0aG9zZSB3ZXJlIHRlYXJzIG9mIGhhcHBpbmVzcy4gXCIsXG4gICAgICAgIF1cbiAgICBcbiAgICAgICAgdGhpcy5pdGVtQ2hvaWNlUHJlc2VudGVkID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiV2hhdCBkbyB5b3Ugd2FudCB0byB1c2U/IGEgW0hdZWFsdGggUG90aW9uLCBhIFtTXWFuaXR5IFBvdGlvbiBvciB0aGUgU3RyYVtZXSBTb3VsP1wiLFxuICAgICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gdXNlIHRoZSBSdXN0eSBLZXk/IEl0IHNlZW1zIGxpa2UgeW91IGNhbiBqdXN0IG9wZW4gdGhlIG5leHQgZXh0cmFuY2UgYW5kIGVzY2FwZSB3aXRob3V0IGZpZ2h0aW5nIHRoZSBlbmVteS4gXCIsXG4gICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkcmluayB0aGUgU2FuaXR5IFBvdGlvbj8gVGhlIGxhYmVsIHNheXMgaXQgd2lsbCBicmluZyB5b3UgYmFjayB0byB5b3VyIHNlbnNlcywgYnV0IHdvbid0IGhhdmUgbXVjaCBlZmZlY3Qgb24gYSBzYW5lIHBlcnNvbi4gXCIsXG4gICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZWxlYXNlIHRoZSBhYmFuZG9uZWQgc291bD8gSXQgbG9va3MgdmVuZ2VmdWwuIFwiLFxuICAgICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZHJpbmsgdGhlIEhlYWx0aCBQb3Rpb24/IEFyZSB5b3UgZGVzcGVyYXRlIGVub3VnaCB0byB1c2UgaXQgbm93P1wiXG4gICAgICAgIF1cbiAgICBcbiAgICBcbiAgICAgICAgdGhpcy5kZWZlbnNlRm9ybUVuZW15ID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiSGUgZmVsbCBhcGFydC4gXCIsXG4gICAgICAgICAgICBcIkEgc2xpZ2h0IGJyZWV6ZSB3b3VsZCB0b3BwbGUgaGltIG92ZXIuIFwiLFxuICAgICAgICAgICAgXCJJdCBkb2Vzbid0IHRha2UgbXVjaCB0byB0YWtlIGhpbSBkb3duLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgcXVpdGUgZnJhaWwuIFwiLFxuICAgICAgICAgICAgXCJIZSBjYW4ndCBzdXJ2aXZlIGEgbG90LiBcIixcbiAgICAgICAgICAgIFwiSGlzIGJ1aWxkIGlzIHByZXR0eSBhdmVyYWdlLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgcHJldHR5IGR1cmFibGUuIFwiLFxuICAgICAgICAgICAgXCJIZSBoYXMgYSBzb2xpZCBidWlsZC4gXCIsXG4gICAgICAgICAgICBcIkhlIGlzIGJ1aWx0IGxpa2UgYSB0YW5rLiBcIixcbiAgICAgICAgICAgIFwiUHJldHR5IG11Y2ggbm90aGluZyBjYW4gZXZlbiBzY3JhdGNoIGhpbS4gXCIsXG4gICAgICAgICAgICBcIkhlIGlzIGluZGVzdHJ1Y3RpYmxlLiBcIixcbiAgICAgICAgXVxuICAgICAgICB0aGlzLmRlZmVuc2VGb3JtUGxheWVyID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiWW91IGZlbGwgYXBhcnQuIFwiLFxuICAgICAgICAgICAgXCJBIHNsaWdodCBicmVlemUgd291bGQgdG9wcGxlIHlvdSBvdmVyLiBcIixcbiAgICAgICAgICAgIFwiSXQgZG9lc24ndCB0YWtlIG11Y2ggdG8gdGFrZSB5b3UgZG93bi4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgcXVpdGUgZnJhaWwuIFwiLFxuICAgICAgICAgICAgXCJZb3UgY2FuJ3Qgc3Vydml2ZSBhIGxvdC4gXCIsXG4gICAgICAgICAgICBcIllvdXIgYnVpbGQgaXMgcHJldHR5IGF2ZXJhZ2UuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIHByZXR0eSBkdXJhYmxlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGhhdmUgYSBzb2xpZCBidWlsZC4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgYnVpbHQgbGlrZSBhIHRhbmsuIFwiLFxuICAgICAgICAgICAgXCJQcmV0dHkgbXVjaCBub3RoaW5nIGNhbiBldmVuIHNjcmF0Y2ggeW91LiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBpbmRlc3RydWN0aWJsZS4gXCIsXG4gICAgICAgIF1cbiAgICAgICAgdGhpcy5kZXh0ZXJpdHlGb3JtRW5lbXkgPSBbXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJIZSBjYW5ub3QgbW92ZS4gXCIsXG4gICAgICAgICAgICBcIkhlIGNhbiBiYXJlbHkgbW92ZS4gXCIsXG4gICAgICAgICAgICBcIkhlIGlzIHNsb3cuIFwiLFxuICAgICAgICAgICAgXCJIZSBsYWNrcyBhcmlzdHJ5LiBcIixcbiAgICAgICAgICAgIFwiSGUgaXNuJ3QgdmVyeSBmYXN0LiBcIixcbiAgICAgICAgICAgIFwiSGUgaGFzIG1lZGlvY3JlIHNwZWVkLiBcIixcbiAgICAgICAgICAgIFwiSGlzIGRleHRlcml0eSBpcyBhYm92ZSBhdmVyYWdlLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgcXVpdGUgbmltYmxlLiBcIixcbiAgICAgICAgICAgIFwiTmltYmxlIGRvZXNuJ3QgZXZlbiBiZWdpbiB0byBkZXNjcmliZSBoaW0uIFwiLFxuICAgICAgICAgICAgXCJIZSBpcyB0aGUgZGVmaW5pdGlvbiBvZiBmaW5lc3NlLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgbGlrZSB0aGUgd2luZC4gXCIsXG4gICAgICAgIF1cbiAgICAgICAgdGhpcy5kZXh0ZXJpdHlGb3JtUGxheWVyID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiWW91IGNhbm5vdCBtb3ZlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGNhbiBiYXJlbHkgbW92ZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgc2xvdy4gXCIsXG4gICAgICAgICAgICBcIllvdSBsYWNrIGFyaXN0cnkuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlbid0IHZlcnkgZmFzdC4gXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIG1lZGlvY3JlIHNwZWVkLiBcIixcbiAgICAgICAgICAgIFwiWW91ciBkZXh0ZXJpdHkgaXMgYWJvdmUgYXZlcmFnZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgcXVpdGUgbmltYmxlLiBcIixcbiAgICAgICAgICAgIFwiTmltYmxlIGRvZXNuJ3QgZXZlbiBiZWdpbiB0byBkZXNjcmliZSB5b3UuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIHRoZSBkZWZpbml0aW9uIG9mIGZpbmVzc2UuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIGxpa2UgdGhlIHdpbmQuIFwiLFxuICAgICAgICBdXG4gICAgICAgIHRoaXMuc3RyZW5ndGhGb3JtRW5lbXkgPSBbXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJIZSBoYXMgY2Vhc2VkIHRvIGJlLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgYW5lbWljLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgb2J2aW91c2x5IHdlYWsuIFwiLFxuICAgICAgICAgICAgXCJIZSBpcyB2ZXJ5IHNraW5ueS4gXCIsXG4gICAgICAgICAgICBcIkhlIGlzIHNsaWdodGx5IHdlYWsuIFwiLFxuICAgICAgICAgICAgXCJIZSBpc24ndCBlc3BlY2lhbGx5IHN0cm9uZy4gXCIsXG4gICAgICAgICAgICBcIkhlIGhhcyBkZWNlbnQgcG93ZXIuIFwiLFxuICAgICAgICAgICAgXCJIZSBoYXMgaHVnZSBtdXNjbGVzLiBcIixcbiAgICAgICAgICAgIFwiSGUgY2FuIGRlc3Ryb3kgYW55b25lLiBcIixcbiAgICAgICAgICAgIFwiSGUgaGFzIHRoZSBwb3dlciBvZiBIZXJjdWxlcy4gXCIsXG4gICAgICAgICAgICBcIkhlIGhhcyB0aGUgcG93ZXIgb2YgR29kLiBcIixcbiAgICAgICAgXVxuICAgICAgICB0aGlzLnN0cmVuZ3RoRm9ybVBsYXllciA9IFtcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgZGVhZCwgR0FNRSBPVkVSLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBhbmVtaWMuIFwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIG9idmlvdXNseSB3ZWFrLiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSB2ZXJ5IHNraW5ueS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgc2xpZ2h0bHkgd2Vhay4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmVuJ3QgZXNwZWNpYWxseSBzdHJvbmcuIFwiLFxuICAgICAgICAgICAgXCJZb3UgaGF2ZSBkZWNlbnQgcG93ZXIuIFwiLFxuICAgICAgICAgICAgXCJZb3UgaGF2ZSBodWdlIG11c2NsZXMuIFwiLFxuICAgICAgICAgICAgXCJZb3UgY2FuIGRlc3Ryb3kgYW55b25lLiBcIixcbiAgICAgICAgICAgIFwiWW91IGhhdmUgdGhlIHBvd2VyIG9mIEhlcmN1bGVzLiBcIixcbiAgICAgICAgICAgIFwiWW91IGhhdmUgdGhlIHBvd2VyIG9mIEdvZC4gXCIsXG4gICAgICAgIF1cbiAgICAgICAgdGhpcy5oZWFsdGhGb3JtRW5lbXkgPSBbXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJIZSBpcyBkZWFkLiBcIixcbiAgICAgICAgICAgIFwiSGUgaGFzIHRyb3VibGUga2VlcGluZyBoaXMgZXllcyBvcGVuLCBoZSBmZWVscyBoaW1zZWxmIGRyaWZ0aW5nIGF3YXkgaW50byBldGhlci4gXCIsXG4gICAgICAgICAgICBcIkhpcyBsaWZlIGZsYXNoZXMgYmVmb3JlIGhpcyBleWVzLCB0aGUgZGVhdGggaXMgbmVhci4gXCIsXG4gICAgICAgICAgICBcIkhlIGNhbiBiYXJlbHkgbW92ZSwgaGUgd29uZGVycyB3aHkgaGUgZXZlbiBjYW1lIGhlcmUuIFwiLFxuICAgICAgICAgICAgXCJIZSBpcyBncmF2ZWx5IGluanVyZWQsIGhlIHN1ZmZlcnMgZnJvbSBkZWVwIHdvdW5kcy4gXCIsXG4gICAgICAgICAgICBcIkhlIGhhcyBzZXZlcmFsIGJyb2tlbiBib25lcy4gXCIsXG4gICAgICAgICAgICBcIkhlIGlzIGluanVyZWQgYW5kIGxpbXBpbmcuIFwiLFxuICAgICAgICAgICAgXCJIZSBoYXMgcGFpbmZ1bCBjdXRzIG9uIGhpbXNlbGYuIFwiLFxuICAgICAgICAgICAgXCJIZSBoYXMgYnJ1aXNlcyBhbmQgc2NyYXRjaGVzLiBcIixcbiAgICAgICAgICAgIFwiSGUgaXMgc2xpZ2h0bHkgYnJ1aXNlZC4gXCIsXG4gICAgICAgICAgICBcIkhlIGRvZXNuJ3QgbG9vayB3b3VuZGVkLiBcIixcbiAgICAgICAgXVxuICAgIFxuICAgICAgICB0aGlzLmhlYWx0aEZvcm1QbGF5ZXIgPSBbXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJZb3UgYXJlIGRlYWQsIEdBTUUgT1ZFUi4gXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIHRyb3VibGUga2VlcGluZyBoaXMgZXllcyBvcGVuLCB5b3UgZmVlbCB5b3Vyc2VsZiBkcmlmdGluZyBhd2F5IGludG8gZXRoZXIuIFwiLFxuICAgICAgICAgICAgXCJZb3VyIGxpZmUgZmxhc2hlcyBiZWZvcmUgeW91ciBleWVzLCB0aGUgZGVhdGggaXMgbmVhci4gXCIsXG4gICAgICAgICAgICBcIllvdSBjYW4gYmFyZWx5IG1vdmUsIHlvdSB3b25kZXIgd2h5IHlvdSBldmVuIGNhbWUgaGVyZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgZ3JhdmVseSBpbmp1cmVkLCB5b3Ugc3VmZmVyIGZyb20gYmxvb2QgbG9zcy4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgYmxlZWRpbmcgcHJvZnVzZWx5LiBcIixcbiAgICAgICAgICAgIFwiWW91IGFyZSBpbmp1cmVkIGFuZCBibGVlZGluZyBmcm9tIHlvdXIgY3V0cy4gXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIHBhaW5mdWwgY3V0cyBvbiB5b3Vyc2VsZi4gXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIGJydWlzZXMgYW5kIHNjcmF0Y2hlcy4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgc2xpZ2h0bHkgYnJ1aXNlZC4gXCIsXG4gICAgICAgICAgICBcIllvdSBkb24ndCBsb29rIHdvdW5kZWQuIFwiLFxuICAgICAgICBdXG4gICAgXG4gICAgICAgIHRoaXMuc2FuaXR5Rm9ybVBsYXllciA9IFtcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBcIllvdSBoYXZlIGxvc3QgdGhlIHdpbGwgdG8gbGl2ZSwgeW91IGFyZSBkZWFkIGluc2lkZSBhbmQgZGVzaXJlIHRvIGJlIGRlYWQgb3V0c2lkZSBhcyB3ZWxsLiBcIixcbiAgICAgICAgICAgIFwiWW91IGxvb2sgYXQgeW91ciByZWZsZWN0aW9uIHRoZW4gYnVyc3QgaW50byB0ZWFycywgeW91IGtub3cgeW91J2xsIGRpZSBoZXJlLiBcIixcbiAgICAgICAgICAgIFwiWW91IGxvb2sgbGlrZSB5b3UgaGF2ZSBnaXZlbiB1cCBvbiBsaWZlLiBcIixcbiAgICAgICAgICAgIFwiVGhlIHRob3VzYW5kLXlhcmQgc3RhcmUgb24geW91ciBmYWNlIGlzIGhhdW50aW5nLiBcIixcbiAgICAgICAgICAgIFwiWW91ciBleWVzIGFyZSBibG9vZHNob3QsIHlvdSBhcmUgdGlyZWQgb2YgdGhpcyBwbGFjZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBhcmUgZnJvd25pbmcuIFwiLFxuICAgICAgICAgICAgXCJUaGVyZSBpcyBhIHNtaWxlIG9uIHlvdXIgZmFjZS4gXCIsXG4gICAgICAgICAgICBcIllvdSBsb29rIGNvbmZpZGVudC4gXCIsXG4gICAgICAgICAgICBcIkRlc3BpdGUgYmVpbmcgaW4gdGhpcyBzaXR1YXRpb24sIHlvdSBsb29rIGxpa2UgeW91IGFyZSBoYXZpbmcgZnVuLiBcIixcbiAgICAgICAgICAgIFwiWW91IGxvb2sgZXhjaXRlZCB0byBnbyB0byB0aGUgbmV4dCByb29tLiBcIixcbiAgICAgICAgICAgIFwiRXZlbiBpZiB5b3UgZGllLCB5b3Uga25vdyB5b3UnbGwgZGllIGhhcHB5LCB0aGUgam91cm5leSB3YXMgdGhlIGRlc3RpbmF0aW9uIGZvciB5b3UuIFwiLFxuICAgICAgICBdXG4gICAgXG4gICAgICAgIHRoaXMubW9yYWxpdHlGb3JtUGxheWVyID0gW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFwiWW91IHRha2UgYSBnbGFuY2UgYXQgdGhlIG1pcnJvciBhbmQgcXVpY2tseSBsb29rIGF3YXksIGJ1dCB0aGUgaW1hZ2UgaXMgc2VhcmVkIGludG8geW91ciBleWVzLCBpdCBpcyB5b3VyIHRvcnR1cmVkIHNvdWwgaW4gaGVsbCwgeW91IGNhbiBubyBsb25nZXIgaG9sZCBiYWNrIHlvdXIgdHJ1ZSBzZWxmLiBcIixcbiAgICAgICAgICAgIFwiWW91ciBmYWNlIGlzIGRyaXBwaW5nIHdpdGggYmxvb2QsIHlvdSBsb29rIGRvd24gYW5kIHNvIGFyZSB5b3VyIGhhbmRzLCB5b3UgY2FuJ3QgYWNjZXB0IHRoZSByZWFsaXR5IG9mIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgeW91IGNsYXcgYXQgeW91ciBvd24gaGFuZCB0aGUgYmxvb2QgZG9lcyBub3QgZ28gYXdheSwgbm8gbWF0dGVyIGhvdyBoYXJkIHlvdSBydWIgeW91ciBleWVzIGl0IGp1c3QgbWFrZXMgeW91ciBleWVzaWdodCBtb3JlIGFuZCBtb3JlIHJlZC4gXCIsXG4gICAgICAgICAgICBcIllvdXIgZmFjZSBpcyBjb3ZlcmVkIGluIGJsb29kLCB5b3UgbG9vayBkb3duIGFuZCBzZWUgeW91ciBoYW5kcyBhcmUgZHJpcHBpbmcgYXMgd2VsbCwgeW91IGRvbid0IGtub3cgd2h5LCBidXQgeW91IGp1c3Qga25vdyBpdCdzIG5vdCB5b3VyIGJsb29kLCBhcyBzb29uIGFzIHlvdSBibGluayB5b3VyIGhhbmRzIGdvIGJhY2sgdG8gbm9ybWFsLiBcIixcbiAgICAgICAgICAgIFwiVGhlcmUgaXMgbm8gcXVlc3Rpb24gYWJvdXQgaXQsIHRoZSByZWQgc3RhaW5zIG9uIHlvdXIgZmFjZSBhcmUgYmxvb2QsIHlvdSB0cnkgdG8gcnViIHlvdXIgZXllcyB3aXRoIHlvdXIgaGFuZCwgYnV0IGl0IGRvZXMgbm90IGhlbHAuIFwiLFxuICAgICAgICAgICAgXCJZb3VyIGZhY2Ugc2VlbXMgdG8gaGF2ZSByZWQgc3RhaW5zIG9uIGl0LCBidXQgdGhleSBkaXNhcHBlYXIgYXMgc29vbiBhcyB5b3UgYmxpbmsuIFwiLFxuICAgICAgICAgICAgXCJUaGVyZSBpcyBub3RoaW5nIGVsc2Ugb3V0IG9mIG9yZGluYXJ5IGFib3V0IHlvdXIgcmVmbGVjdGlvbi4gXCIsXG4gICAgICAgICAgICBcIllvdSB0YWtlIGEgcGVhayBhdCB0aGUgbWlycm9yIGFuZCB5b3UgY291bGQndmUgc3dvcmUgeW91IHNhdyBhIGZhaW50IGhhbG8gYWJvdmUgeW91ciBoZWFkLCBmb3Igc3BsaXQgc2Vjb25kLCB3YXMgaXQgYSBkZWx1c2lvbj8gUmVnYXJkbGVzcywgaXQgZnVlbHMgeW91IHdpdGggam95LiBcIixcbiAgICAgICAgICAgIFwiVGhlIGhhbG8gYWJvdmUgeW91ciBoZWFkIGlzIGJyaWdodCwgdGhlIGdsb3cgZmVlbHMgeW91ciBoZWFydCB3aXRoIGRldGVybWluYXRpb24uIFwiLFxuICAgICAgICAgICAgXCJUaGUgaGFsbyBpcyBjbGVhcmx5IHZpc2libGUsIHlvdSBjYW4gZXZlbiBzZWUgYSBwYWlyIG9mIHdpbmdzIGJlaGluZCB5b3VyIGJhY2suIFwiLFxuICAgICAgICAgICAgXCJZb3UgY2FuIGJhcmVseSBzZWUgeW91cnNlbGYsIHRoZSBob2x5IGdsb3cgaW4gdGhlIG1pcnJvciBpcyBvdmVyd2hlbG1pbmcgeW91LiBcIixcbiAgICAgICAgICAgIFwiWW91IHRha2UgYSBnbGFuY2UgYXQgdGhlIG1pcnJvciBhbmQgaXQgYWxtb3N0IGJsaW5kcyB5b3UsIGJ1dCB5b3UgY2xlYXJseSBzYXcgdGhlIGltYWdlIG9mIHlvdXJzZWxmIGluIGhlYXZlbiwgeW91IGFyZSBubyBsb25nZXIgYWZyYWlkIG9mIGRlYXRoLiBcIixcbiAgICAgICAgXVxuICAgIH0gICAgICAgIFxuXG59XG4iLCJcbmltcG9ydCB7Zmxvb3JCdWlsZGVyTWVtb3J5fSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7ZW5lbXlTdGF0c01lbW9yeX0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQge3N0YWdlQWR2YW5jZX0gZnJvbSAnLi9zdGFnZUFkdmFuY2UnO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3NcIjtcbmltcG9ydCB7IGRpYWxvZ3VlYmFuaywgcGxheWVyU3RhdHNNZW1vcnksIHByb21wdENvbnRyb2xsZXJNZW1vcnkgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3Mgc2V0Rmxvb3Ige1xuICAgIGNvbnN0cnVjdG9yKGRpZmZpY3VsdHk6IG51bWJlciwgaG9ycm9yOiBudW1iZXIsIGN1cnJlbnRzdGFnZTogc3RhZ2VBZHZhbmNlKSB7XG4gICAgICAgIGZsb29yQnVpbGRlck1lbW9yeS5lbmVteUlzQWxpdmUgPSB0cnVlO1xuICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkuaXRlbUlzT25Hcm91bmQgPSB0cnVlO1xuICAgICAgICBjdXJyZW50c3RhZ2UuaW5jcmVhc2VDdXJyZW50U3RhZ2UoKTtcbiAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGRpYWxvZ3VlYmFuay5tb3ZpbmdQbGFjZS5sZW5ndGggLSBzZXR0aW5ncy5kaWFsb2d1ZUJhc2UpKSArIHNldHRpbmdzLmRpYWxvZ3VlQmFzZTtcbiAgICAgICAgaWYgKGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciA9PSBmbG9vckJ1aWxkZXJNZW1vcnkucHJldmlvdXNGbG9vcikge1xuICAgICAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGRpYWxvZ3VlYmFuay5tb3ZpbmdQbGFjZS5sZW5ndGggLSBzZXR0aW5ncy5kaWFsb2d1ZUJhc2UpKSArIHNldHRpbmdzLmRpYWxvZ3VlQmFzZTtcbiAgICAgICAgfVxuICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkucHJldmlvdXNGbG9vciA9IGZsb29yQnVpbGRlck1lbW9yeS5mbG9vcjtcblxuICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGlhbG9ndWViYW5rLmVuZW15Rm9ybS5sZW5ndGggLSBzZXR0aW5ncy5kaWFsb2d1ZUJhc2UpKSArIHNldHRpbmdzLmRpYWxvZ3VlQmFzZTtcbiAgICAgICAgaWYgKGZsb29yQnVpbGRlck1lbW9yeS5lbmVteSA9PSBmbG9vckJ1aWxkZXJNZW1vcnkucHJldmlvdXNFbmVteSkge1xuICAgICAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGRpYWxvZ3VlYmFuay5lbmVteUZvcm0ubGVuZ3RoIC0gc2V0dGluZ3MuZGlhbG9ndWVCYXNlKSkgKyBzZXR0aW5ncy5kaWFsb2d1ZUJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5LnByZXZpb3VzRW5lbXkgPSBmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXk7XG5cbiAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGlhbG9ndWViYW5rLml0ZW1Gb3JtLmxlbmd0aCAtIHNldHRpbmdzLmRpYWxvZ3VlQmFzZSkpICsgc2V0dGluZ3MuZGlhbG9ndWVCYXNlO1xuICAgICAgICBpZiAoZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW0gPT0gZmxvb3JCdWlsZGVyTWVtb3J5LnByZXZpb3VzSXRlbSkge1xuICAgICAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGlhbG9ndWViYW5rLml0ZW1Gb3JtLmxlbmd0aCAtIHNldHRpbmdzLmRpYWxvZ3VlQmFzZSkpICsgc2V0dGluZ3MuZGlhbG9ndWVCYXNlO1xuICAgICAgICB9XG4gICAgICAgIGZsb29yQnVpbGRlck1lbW9yeS5wcmV2aW91c0l0ZW0gPSBmbG9vckJ1aWxkZXJNZW1vcnkuaXRlbTtcblxuICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkubW92ZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChkaWFsb2d1ZWJhbmsubW92aW5nUXVvdGVzLmxlbmd0aCAtIHNldHRpbmdzLmRpYWxvZ3VlQmFzZSkpICsgc2V0dGluZ3MuZGlhbG9ndWVCYXNlO1xuICAgICAgICBpZiAoZmxvb3JCdWlsZGVyTWVtb3J5Lm1vdmUgPT0gZmxvb3JCdWlsZGVyTWVtb3J5LnByZXZpb3VzTW92ZSkge1xuICAgICAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5Lm1vdmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGlhbG9ndWViYW5rLm1vdmluZ1F1b3Rlcy5sZW5ndGggLSBzZXR0aW5ncy5kaWFsb2d1ZUJhc2UpKSArIHNldHRpbmdzLmRpYWxvZ3VlQmFzZTtcbiAgICAgICAgfVxuICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkucHJldmlvdXNNb3ZlID0gZmxvb3JCdWlsZGVyTWVtb3J5Lm1vdmU7XG5cbiAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCA9IHNldHRpbmdzLm1heEVuZW15U3RhdHM7XG4gICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlEZWZlbnNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpICogZGlmZmljdWx0eSkgKyBzZXR0aW5ncy5lbmVteVN0YXRCYXNlO1xuICAgICAgICBpZiAoZW5lbXlTdGF0c01lbW9yeS5lbmVteURlZmVuc2UgPiBzZXR0aW5ncy5tYXhFbmVteVN0YXRzKSB7XG4gICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15RGVmZW5zZSA9IHNldHRpbmdzLm1heEVuZW15U3RhdHM7XG4gICAgICAgIH1cblxuICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15U3RyZW5ndGggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50c3RhZ2UuZ2V0Q3VycmVudFN0YWdlKCkgKiBkaWZmaWN1bHR5KSArIHNldHRpbmdzLmVuZW15U3RhdEJhc2U7XG4gICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LmVuZW15U3RyZW5ndGggPiBzZXR0aW5ncy5tYXhFbmVteVN0YXRzKSB7XG4gICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15U3RyZW5ndGggPSBzZXR0aW5ncy5tYXhFbmVteVN0YXRzO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteURleHRlcml0eSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRzdGFnZS5nZXRDdXJyZW50U3RhZ2UoKSAqIGRpZmZpY3VsdHkpICsgc2V0dGluZ3MuZW5lbXlTdGF0QmFzZTtcbiAgICAgICAgaWYgKGVuZW15U3RhdHNNZW1vcnkuZW5lbXlEZXh0ZXJpdHkgPiBzZXR0aW5ncy5tYXhFbmVteVN0YXRzKSB7XG4gICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15RGV4dGVyaXR5ID0gc2V0dGluZ3MubWF4RW5lbXlTdGF0cztcbiAgICAgICAgfVxuICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2V0dGluZ3MuZW5lbXlIZWFsdGhWYXJpYXRpb24pICsgc2V0dGluZ3MuZW5lbXlIZWFsdGhCYXNlO1xuICAgICAgICBpZiAoZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCA+IHNldHRpbmdzLm1heEVuZW15U3RhdHMpIHtcbiAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlIZWFsdGggPSBzZXR0aW5ncy5tYXhFbmVteVN0YXRzO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy9zZXR0aW5ncyBmb3IgcHJvbXB0Q2hlY2sgLSBjaGFuZ2UgdGhlIHZhcmlhYmxlcyBoZXJlIHRvIGNoYW5nZSB0aGUgZmlyc3Qgd29yZCBvZiBhIGxldHRlciBwcm9tcHQgcmVhY3RzIHRvXG5leHBvcnQgbGV0IGdvRG93biA9IFwiZFwiO1xuZXhwb3J0IGxldCBjaGVja0VuZW15ID0gXCJpXCI7XG5leHBvcnQgbGV0IGNoZWNrSXRlbSA9IFwiclwiO1xuZXhwb3J0IGxldCBjaGVja1BsYXllciA9IFwiY1wiO1xuZXhwb3J0IGxldCBjaGVja01pcnJvciA9IFwibVwiO1xuZXhwb3J0IGxldCBhdHRhY2sgPSBcImZcIjtcbmV4cG9ydCBsZXQgcGlja1VwSXRlbSA9IFwiZVwiO1xuZXhwb3J0IGxldCBvcGVuUG90aW9uQmFnID0gXCJwXCI7XG5leHBvcnQgbGV0IHVzZVNhbml0eVBvdGlvbiA9IFwic1wiO1xuZXhwb3J0IGxldCB1c2VTb3VsID0gXCJ5XCI7XG5leHBvcnQgbGV0IHVzZUhlYWx0aFBvdGlvbiA9IFwiaFwiO1xuXG4vL3NldHRpbmdzIGZvciBwbGF5ZXIgc3RhdHMgLSBjaGFuZ2UgdmFyaWFibGVzIGhlcmUgdG8gY2hhbmdlIHRoZSBzdGFydGluZyBhbmQgbWF4IHZhbHVlIG9mIHRoZSBwbGF5ZXIgc3RhdHMuXG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVySGVhbHRoID0gMTE7XG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVyRGVmZW5zZSA9IDY7XG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVyU3RyZW5ndGggPSA2O1xuZXhwb3J0IGxldCBzdGFydGluZ1BsYXllckRleHRlcml0eSA9IDY7XG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVyRGVmZW5zZURlYnVmZiA9IDA7XG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVyU3RyZW5ndGhEZWJ1ZmYgPSAwO1xuZXhwb3J0IGxldCBzdGFydGluZ1BsYXllckRleHRlcml0eURlYnVmZiA9IDA7XG5leHBvcnQgbGV0IHN0YXJ0aW5nUGxheWVyU2FuaXR5ID0gNjtcbmV4cG9ydCBsZXQgc3RhcnRpbmdQbGF5ZXJNb3JhbGl0eSA9IDY7XG5leHBvcnQgbGV0IGJhc2VQbGF5ZXJTdGF0cyA9IDY7XG5leHBvcnQgbGV0IG1heFBsYXllclN0YXRzID0gMTE7XG5leHBvcnQgbGV0IHBsYXllcklzRGVhZCA9IDI7XG5leHBvcnQgbGV0IHNhbml0eVNoaWVsZCA9IDM7XG5leHBvcnQgbGV0IHNhbml0eURyYWluID0gMTtcblxuLy9zZXR0aW5ncyBmb3IgcGxheWVyIHN0YXRzIC0gY2hhbmdlIHZhcmlhYmxlcyBoZXJlIHRvIGNoYW5nZSB0aGUgc3RhcnRpbmcgdmFsdWUgb2YgdGhlIGVuZW15IHN0YXRzLlxuZXhwb3J0IGxldCBtYXhFbmVteVN0YXRzID0gMTE7XG5leHBvcnQgbGV0IGVuZW15SGVhbHRoQmFzZSA9IDk7XG5leHBvcnQgbGV0IGVuZW15SGVhbHRoVmFyaWF0aW9uID0gMztcbmV4cG9ydCBsZXQgZW5lbXlTdGF0QmFzZSA9IDI7XG5leHBvcnQgbGV0IGVuZW15RHlpbmcgPSAyO1xuZXhwb3J0IGxldCBlbmVteURlYWQgPSAxO1xuZXhwb3J0IGxldCBkaWFsb2d1ZUJhc2UgPSAxO1xuXG4vL3NldHRpbmdzIGZvciBzdGFydGluZyBzdGFnZSAtIGNoYW5nZSB0aGlzIHZhcmlhYmxlcyB0byBjaGFuZ2Ugd2hpY2ggc3RhZ2UgcGxheWVyIHN0YXJ0cyBvbiwgaGlnaGVyIHN0YWdlIG1lYW5zIGhpZ2hlciBkaWZmaWN1bHR5XG5leHBvcnQgbGV0IHN0YXJ0aW5nU3RhZ2UgPSAxO1xuXG4vL3NldHRpbmdzIGZvciBwcm9tcHQgLSBjaGFuZ2UgdGhpcyB2YXJpYWJsZXMgdG8gY2hhbmdlIHRleHQgc3BlZWQuXG5leHBvcnQgbGV0IHRleHRTcGVlZFByb21wdCA9IDEwO1xuXG4vL3NldHRpbmdzIGZvciBzdGFydGluZyBwbGF5ZXIgZXF1aXBtZW50IC0gY2hhbmdlIHRoaXMgdmFsdWUgdG8gbW9kaWZ5IHN0YXJ0aW5nIGdlYXIuXG5leHBvcnQgbGV0IHN0YXJ0aW5nSGFzTWlycm9yID0gMTtcbmV4cG9ydCBsZXQgc3RhcnRpbmdBcm1vckxldmVsID0gMDtcbmV4cG9ydCBsZXQgc3RhcnRpbmdIZWxtZXRMZXZlbCA9IDA7XG5leHBvcnQgbGV0IHN0YXJ0aW5nR2xvdmVzTGV2ZWwgPSAwO1xuZXhwb3J0IGxldCBzdGFydGluZ1NvdWxBbW91bnQgPSAxMDtcbmV4cG9ydCBsZXQgc3RhcnRpbmdLZXlBbW91bnQgPSA1O1xuZXhwb3J0IGxldCBzdGFydGluZ1dlYXBvbkxldmVsID0gMDtcbmV4cG9ydCBsZXQgc3RhcnRpbmdIZWFsdGhQb3Rpb25BbW91bnQgPSAxMDtcbmV4cG9ydCBsZXQgc3RhcnRpbmdTYW5pdHlQb3Rpb25BbW91bnQgPSAxMDtcbmV4cG9ydCBsZXQgc3RhcnRpbmdSaW5nTGV2ZWwgPSAwO1xuZXhwb3J0IGxldCBzdGFydGluZ1NoaWVsZExldmVsID0gMDtcbmV4cG9ydCBsZXQgaXRlbU5vRGlzcGxheSA9IDA7XG5leHBvcnQgbGV0IGl0ZW1TaW5ndWxhciA9IDE7XG5cbiIsIi8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cbi8vQ2xhc3MgdGhhdCBzaG93cyBhbGwgdGhlIGdyYXBoaWNzIChpbmNsdWRpbmcgZ2lmcylcblxuZXhwb3J0IGNsYXNzIHNob3dHcmFwaGljcyB7XG4gICAgY29uc3RydWN0b3Ioc2hvd25FbmVteTogc3RyaW5nIHwgbnVtYmVyLCBzaG93bkl0ZW06IHN0cmluZyB8IG51bWJlciwgc2hvd25GbG9vcjogc3RyaW5nIHwgbnVtYmVyLCBzaG93bkFuaW1hdGlvbjogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5lbXknKSkuc3JjID0gXCJnZngvZW5lbWllcy9cIiArIHNob3duRW5lbXkgKyBcIi5naWZcIjtcbiAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpdGVtJykpLnNyYyA9IFwiZ2Z4L2l0ZW1zL1wiICsgc2hvd25JdGVtICsgXCIucG5nXCI7XG4gICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxvb3InKSkuc3JjID0gXCJnZngvZmxvb3JzL1wiICsgc2hvd25GbG9vciArIFwiLnBuZ1wiO1xuICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FuaW1hdGlvbicpKS5zcmMgPSBcImdmeC9hbmltYXRpb25zL1wiICsgc2hvd25BbmltYXRpb24gKyBcIi5naWZcIjtcbiAgICB9XG59XG5cbiIsIlxuICAgIC8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbmltcG9ydCB7IHBsYXllclN0YXRzTWVtb3J5IH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IHBsYXllckludmVudG9yeSB9IGZyb20gXCIuL3BsYXllckludmVudG9yeVwiO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3NcIjtcbmV4cG9ydCBsZXQgcGxheWVySW52ZW50b3J5TWVtb3J5ID0gbmV3IHBsYXllckludmVudG9yeShzZXR0aW5ncy5zdGFydGluZ0hhc01pcnJvciwgc2V0dGluZ3Muc3RhcnRpbmdBcm1vckxldmVsLCBzZXR0aW5ncy5zdGFydGluZ0hlbG1ldExldmVsLCBzZXR0aW5ncy5zdGFydGluZ0dsb3Zlc0xldmVsLCBzZXR0aW5ncy5zdGFydGluZ1NvdWxBbW91bnQsIHNldHRpbmdzLnN0YXJ0aW5nS2V5QW1vdW50LCBzZXR0aW5ncy5zdGFydGluZ1dlYXBvbkxldmVsLCBzZXR0aW5ncy5zdGFydGluZ0hlYWx0aFBvdGlvbkFtb3VudCwgc2V0dGluZ3Muc3RhcnRpbmdTYW5pdHlQb3Rpb25BbW91bnQsIHNldHRpbmdzLnN0YXJ0aW5nUmluZ0xldmVsLCBzZXR0aW5ncy5zdGFydGluZ1NoaWVsZExldmVsKTtcbiAgICAvL0NsYXNzIHVwZGF0aW5nIHRoZSBpbnZlbnRvcnkgb24gcmlnaHQgc2lkZSBvZiB0aGUgc2NyZWVuLlxuICAgIGV4cG9ydCBjbGFzcyBpbnZlbnRvcnkge1xuICAgICAgICBjb25zdHJ1Y3RvcihNaXJyb3I6IG51bWJlciwgQXJtb3I6IG51bWJlciwgSGVsbWV0OiBudW1iZXIsIEdsb3ZlczogbnVtYmVyLCBLZXlzOiBudW1iZXIsIFdlYXBvbjogbnVtYmVyLCBIZWFsdGg6IHN0cmluZyB8IG51bWJlciwgU291bHM6IG51bWJlciwgU2FuaXR5OiBzdHJpbmcgfCBudW1iZXIsIFJpbmc6IG51bWJlciwgU2hpZWxkOiBudW1iZXIpIHtcblxuICAgICAgICAgICAgaWYgKEhlYWx0aCAhPSBzZXR0aW5ncy5pdGVtTm9EaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKEhlYWx0aCA9PSBzZXR0aW5ncy5pdGVtU2luZ3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJIZWFsdGhJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCI8dT5cIiArIEhlYWx0aCArIFwiIEhlYWx0aCBQb3Rpb248L3U+PC9icj4gPC9icj5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiSGVhbHRoSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+XCIgKyBIZWFsdGggKyBcIiBIZWFsdGggUG90aW9uczwvdT48L2JyPiA8L2JyPlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkhlYWx0aEludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIlwiO1xuXG5cbiAgICAgICAgICAgIGlmIChTYW5pdHkgIT0gc2V0dGluZ3MuaXRlbU5vRGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGlmIChTYW5pdHkgPT0gc2V0dGluZ3MuaXRlbVNpbmd1bGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiU2FuaXR5SW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+XCIgKyBTYW5pdHkgKyBcIiBTYW5pdHkgUG90aW9uPC91PjwvYnI+IDwvYnI+XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlNhbml0eUludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIjx1PlwiICsgU2FuaXR5ICsgXCIgU2FuaXR5IFBvdGlvbnM8L3U+PC9icj4gPC9icj5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTYW5pdHlJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCJcIjtcblxuXG4gICAgICAgICAgICBpZiAoU291bHMgIT0gc2V0dGluZ3MuaXRlbU5vRGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGlmIChTb3VscyA9PSBzZXR0aW5ncy5pdGVtU2luZ3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTb3VsSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+XCIgKyBTb3VscyArIFwiIFN0cmF5IFNvdWw8L3U+PC9icj4gPC9icj5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiU291bEludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIjx1PlwiICsgU291bHMgKyBcIiBTdHJheSBTb3VsczwvdT48L2JyPiA8L2JyPlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlNvdWxJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCJcIjtcblxuXG5cbiAgICAgICAgICAgIGlmIChLZXlzICE9IHNldHRpbmdzLml0ZW1Ob0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoS2V5cyA9PSBzZXR0aW5ncy5pdGVtU2luZ3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJLZXlzSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+XCIgKyBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkua2V5QW1vdW50ICsgXCIgUnVzdHkgS2V5PC91PjwvYnI+IDwvYnI+XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIktleXNJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCI8dT5cIiArIHBsYXllckludmVudG9yeU1lbW9yeS5rZXlBbW91bnQgKyBcIiBSdXN0eSBLZXlzPC91PjwvYnI+IDwvYnI+XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiS2V5c0ludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIlwiO1xuXG5cblxuICAgICAgICAgICAgaWYgKEFybW9yICE9IHNldHRpbmdzLml0ZW1Ob0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZWZlbnNlID0gc2V0dGluZ3MuYmFzZVBsYXllclN0YXRzICsgcGxheWVySW52ZW50b3J5TWVtb3J5LmFybW9yTGV2ZWwgLSBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZWZlbnNlRGVidWZmO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZWZlbnNlID4gc2V0dGluZ3MubWF4UGxheWVyU3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyU3RhdHNNZW1vcnkucGxheWVyRGVmZW5zZSA9IHNldHRpbmdzLm1heFBsYXllclN0YXRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkFybW9ySW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+VG91Z2ggQXJtb3I8L3U+IC0gK1wiICsgcGxheWVySW52ZW50b3J5TWVtb3J5LmFybW9yTGV2ZWwgKyBcIiBkZWZlbnNlIGJvbnVzLiA8L2JyPiA8L2JyPlwiO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJBcm1vckludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIjx1PkNsb2FrPC91PiAtIE5vIGJvbnVzZXMuIDwvYnI+IDwvYnI+XCI7XG5cblxuICAgICAgICAgICAgaWYgKFNoaWVsZCAhPSBzZXR0aW5ncy5pdGVtTm9EaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTaGllbGRJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCI8dT5Tb2xpZCBTaGllbGQ8L3U+IC0gXCIgKyBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc2hpZWxkTGV2ZWwgKyBcIjAlIGVuZW15IGRhbWFnZSByZWR1Y3Rpb24uIDwvYnI+IDwvYnI+XCI7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlNoaWVsZEludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgICAgICBpZiAoR2xvdmVzICE9IHNldHRpbmdzLml0ZW1Ob0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkdsb3Zlc0ludmVudG9yeVwiKS5pbm5lckhUTUwgPSBcIjx1PlNwaWtlZCBHbG92ZXM8L3U+IC0gXCIgKyBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuZ2xvdmVzTGV2ZWwgKyBcIjAlIGFkZGl0aW9uYWwgZGFtYWdlLiA8L2JyPiA8L2JyPlwiO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJHbG92ZXNJbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCI8dT5MZWF0aGVyIEdsb3ZlczwvdT4gLSBObyBib251c2VzLiA8L2JyPiA8L2JyPlwiO1xuXG5cblxuXG4gICAgICAgICAgICBpZiAoSGVsbWV0ICE9IHNldHRpbmdzLml0ZW1Ob0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTdHJlbmd0aCA9IHNldHRpbmdzLmJhc2VQbGF5ZXJTdGF0cyArIHBsYXllckludmVudG9yeU1lbW9yeS5oZWxtZXRMZXZlbCAtIHBsYXllclN0YXRzTWVtb3J5LnBsYXllclN0cmVuZ3RoRGVidWZmO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTdHJlbmd0aCA+IHNldHRpbmdzLm1heFBsYXllclN0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllclN0YXRzTWVtb3J5LnBsYXllclN0cmVuZ3RoID0gc2V0dGluZ3MubWF4UGxheWVyU3RhdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiSGVsbWV0SW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+U3RlZWwgSGVsbWV0PC91PiAtICtcIiArIHBsYXllckludmVudG9yeU1lbW9yeS5oZWxtZXRMZXZlbCArIFwiIHN0cmVuZ3RoIGJvbnVzLiA8L2JyPiA8L2JyPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiSGVsbWV0SW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+Q2xvdGggSG9vZDwvdT4gLSBObyBib251c2VzLiA8L2JyPiA8L2JyPlwiO1xuXG5cbiAgICAgICAgICAgIGlmIChSaW5nICE9IHNldHRpbmdzLml0ZW1Ob0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZXh0ZXJpdHkgPSBzZXR0aW5ncy5iYXNlUGxheWVyU3RhdHMgKyBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkucmluZ0xldmVsIC0gcGxheWVyU3RhdHNNZW1vcnkucGxheWVyRGV4dGVyaXR5RGVidWZmO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZXh0ZXJpdHkgPiBzZXR0aW5ncy5tYXhQbGF5ZXJTdGF0cykge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZXh0ZXJpdHkgPSBzZXR0aW5ncy5tYXhQbGF5ZXJTdGF0cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJSaW5nSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+U2hpbnkgUmluZzwvdT4gLSArXCIgKyBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkucmluZ0xldmVsICsgXCIgZGV4dGVyaXR5IGJvbnVzLiA8L2JyPiA8L2JyPlwiO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJSaW5nSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiXCI7XG5cblxuICAgICAgICAgICAgaWYgKFdlYXBvbiAhPSBzZXR0aW5ncy5pdGVtTm9EaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJXZWFwb25JbnZlbnRvcnlcIikuaW5uZXJIVE1MID0gXCI8dT5TaGFycCBTd29yZDwvdT4gLSBcIiArIHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCArIFwiIGF0dGFjayBwb3dlci4gPC9icj4gPC9icj5cIjtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiV2VhcG9uSW52ZW50b3J5XCIpLmlubmVySFRNTCA9IFwiPHU+RmlzdHM8L3U+IC0gMSBhdHRhY2sgcG93ZXIuPC9icj4gPC9icj5cIjtcblxuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgbmV3IGludmVudG9yeShwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuaGFzTWlycm9yLCBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuYXJtb3JMZXZlbCwgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlbG1ldExldmVsLCBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuZ2xvdmVzTGV2ZWwsIHBsYXllckludmVudG9yeU1lbW9yeS5rZXlBbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCwgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlYWx0aFBvdGlvbkFtb3VudCwgcGxheWVySW52ZW50b3J5TWVtb3J5LnNvdWxBbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS5zYW5pdHlQb3Rpb25BbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS5yaW5nTGV2ZWwsIHBsYXllckludmVudG9yeU1lbW9yeS5zaGllbGRMZXZlbCk7XG5cbiIsImV4cG9ydCBjbGFzcyBwbGF5ZXJJbnZlbnRvcnl7XG5cblxuaGFzTWlycm9yIDogbnVtYmVyO1xuYXJtb3JMZXZlbCA6IG51bWJlcjtcbmhlbG1ldExldmVsIDogbnVtYmVyO1xuZ2xvdmVzTGV2ZWwgOiBudW1iZXI7XG5zb3VsQW1vdW50IDogbnVtYmVyO1xua2V5QW1vdW50IDogbnVtYmVyO1xud2VhcG9uTGV2ZWwgOiBudW1iZXI7XG5oZWFsdGhQb3Rpb25BbW91bnQgOiBudW1iZXI7XG5zYW5pdHlQb3Rpb25BbW91bnQgOiBudW1iZXI7XG5yaW5nTGV2ZWwgOiBudW1iZXI7XG5zaGllbGRMZXZlbCA6IG51bWJlcjtcblxuXG4gICAgY29uc3RydWN0b3IoaGFzTWlycm9yIDogbnVtYmVyLCBhcm1vckxldmVsIDogbnVtYmVyLCBoZWxtZXRMZXZlbCA6IG51bWJlciwgZ2xvdmVzTGV2ZWwgOiBudW1iZXIsIHNvdWxBbW91bnQgOiBudW1iZXIsIGtleUFtb3VudCA6IG51bWJlciwgd2VhcG9uTGV2ZWwgOiBudW1iZXIsIGhlYWx0aFBvdGlvbkFtb3VudCA6IG51bWJlcixzYW5pdHlQb3Rpb25BbW91bnQgOiBudW1iZXIsIHJpbmdMZXZlbCA6IG51bWJlciwgc2hpZWxkTGV2ZWwgOiBudW1iZXIpe1xuICAgICAgdGhpcy5oYXNNaXJyb3IgPSBoYXNNaXJyb3I7XG4gICAgICB0aGlzLmFybW9yTGV2ZWwgPSBhcm1vckxldmVsO1xuICAgICAgdGhpcy5oZWxtZXRMZXZlbCA9IGhlbG1ldExldmVsO1xuICAgICAgdGhpcy5nbG92ZXNMZXZlbCA9IGdsb3Zlc0xldmVsO1xuICAgICAgdGhpcy5zb3VsQW1vdW50ID0gc291bEFtb3VudDtcbiAgICAgIHRoaXMua2V5QW1vdW50ID0ga2V5QW1vdW50O1xuICAgICAgdGhpcy53ZWFwb25MZXZlbCA9IHdlYXBvbkxldmVsO1xuICAgICAgdGhpcy5oZWFsdGhQb3Rpb25BbW91bnQgPSBoZWFsdGhQb3Rpb25BbW91bnQ7XG4gICAgICB0aGlzLnNhbml0eVBvdGlvbkFtb3VudCA9IHNhbml0eVBvdGlvbkFtb3VudDtcbiAgICAgIHRoaXMucmluZ0xldmVsID0gcmluZ0xldmVsO1xuICAgICAgdGhpcy5zaGllbGRMZXZlbCA9IHNoaWVsZExldmVsO1xuICAgIH1cbiAvKlxuICAgIGdldEN1cnJlbnRTdGFnZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFnZTtcbiAgICB9XG4gICAgc2V0Q3VycmVudFN0YWdlKHN0YWdlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcbiAgICB9XG4gICAgaW5jcmVhc2VDdXJyZW50U3RhZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhZ2UgPSB0aGlzLnN0YWdlICsgMTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZHppYcWCYVwiKTtcbiAgIH1cbiAgICovXG4gIFxufSIsIiAgICAvL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuICAgIC8vQ2xhc3MgcmVzcG9uc2libGUgZm9yIGl0ZW0gdXNhZ2UgKGluY2x1ZGluZyB3ZWFwb24pXG5cbmltcG9ydCB7IGVuZW15U3RhdHNNZW1vcnksIGZsb29yQnVpbGRlck1lbW9yeSwgcGxheWVyU3RhdHNNZW1vcnksIGNvbWJhdENvbnRyb2xsZXJNZW1vcnksIHByb21wdENvbnRyb2xsZXJNZW1vcnksIHNob3dEaWFsb2d1ZSB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBzaG93R3JhcGhpY3MgfSBmcm9tIFwiLi9zaG93R3JhcGhpY3NcIjtcbmltcG9ydCB7IHNob3dJbmZvIH0gZnJvbSBcIi4vc2hvd0luZm9cIjtcbmltcG9ydCB7IHBsYXllckludmVudG9yeU1lbW9yeSB9IGZyb20gXCIuL2ludmVudG9yeVwiO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3NcIjtcbiAgICBcbiAgICBleHBvcnQgY2xhc3MgdXNlSXRlbSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHdoaWNoSXRlbTogc3RyaW5nKSB7XG5cbiAgICAgICAgICAgIHN3aXRjaCAod2hpY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy51c2VIZWFsdGhQb3Rpb246XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuaGVhbHRoUG90aW9uQW1vdW50ID49IHNldHRpbmdzLml0ZW1TaW5ndWxhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteU9uU2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgc2hvd0dyYXBoaWNzKDAsIDAsIGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciwgNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtVXNlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoID0gc2V0dGluZ3MubWF4UGxheWVyU3RhdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuaGVhbHRoUG90aW9uQW1vdW50ID0gcGxheWVySW52ZW50b3J5TWVtb3J5LmhlYWx0aFBvdGlvbkFtb3VudCAtIHNldHRpbmdzLml0ZW1TaW5ndWxhcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0l0ZW1VbmF2YWlsYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5hdHRhY2s6XG4gICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlPblNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBzaG93R3JhcGhpY3MoZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15ICsgMTAsIDAsIGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoID49IHNldHRpbmdzLmVuZW15RGVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tYmF0Q29udHJvbGxlck1lbW9yeS5hdHRhY2tTdHJlbmd0aCA9IE1hdGgucm91bmQocGxheWVySW52ZW50b3J5TWVtb3J5LndlYXBvbkxldmVsICsgcGxheWVyU3RhdHNNZW1vcnkucGxheWVyU3RyZW5ndGggLSBlbmVteVN0YXRzTWVtb3J5LmVuZW15RGVmZW5zZSAtIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlEZXh0ZXJpdHkgKyAoMC41ICogcGxheWVySW52ZW50b3J5TWVtb3J5Lmdsb3Zlc0xldmVsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tYmF0Q29udHJvbGxlck1lbW9yeS5hdHRhY2tTdHJlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iYXRDb250cm9sbGVyTWVtb3J5LmF0dGFja1N0cmVuZ3RoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWW91ciBwb3dlclwiICsgY29tYmF0Q29udHJvbGxlck1lbW9yeS5hdHRhY2tTdHJlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoID0gZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCAtIGNvbWJhdENvbnRyb2xsZXJNZW1vcnkuYXR0YWNrU3RyZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoIDwgc2V0dGluZ3MuZW5lbXlEeWluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlIZWFsdGggPSBzZXR0aW5ncy5lbmVteURlYWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNTd29yZFVzZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS53YWl0Rm9yQXR0YWNrID0gdHJ1ZTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXlJc0FsaXZlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS53YWl0Rm9yQXR0YWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15SXNBbGl2ZSA9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iYXRDb250cm9sbGVyTWVtb3J5LmVuZW15QXR0YWNrU3RyZW5ndGggPSBNYXRoLnJvdW5kKGVuZW15U3RhdHNNZW1vcnkuZW5lbXlTdHJlbmd0aCAtIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZWZlbnNlIC8gNSkgLSAocGxheWVyU3RhdHNNZW1vcnkucGxheWVyRGV4dGVyaXR5IC8gNSkgLSAoMC41ICogcGxheWVySW52ZW50b3J5TWVtb3J5LnNoaWVsZExldmVsKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVuZW15IHBvd2VyXCIgKyBjb21iYXRDb250cm9sbGVyTWVtb3J5LmVuZW15QXR0YWNrU3RyZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJhdENvbnRyb2xsZXJNZW1vcnkuZW5lbXlBdHRhY2tTdHJlbmd0aCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tYmF0Q29udHJvbGxlck1lbW9yeS5lbmVteUF0dGFja1N0cmVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGggPSBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGggLSBjb21iYXRDb250cm9sbGVyTWVtb3J5LmVuZW15QXR0YWNrU3RyZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aCA8IHNldHRpbmdzLnBsYXllcklzRGVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVyU2FuaXR5ID4gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGggPSBzZXR0aW5ncy5zYW5pdHlTaGllbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTYW5pdHkgPSBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTYW5pdHkgLSBzZXR0aW5ncy5zYW5pdHlEcmFpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2FuaXR5IEhpdDogVGFrZW4sIGN1cnJlbnQgU2FuaXR5OlwiICsgcGxheWVyU3RhdHNNZW1vcnkucGxheWVyU2FuaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGggPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHNob3dHcmFwaGljcyhmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXkgKyAxMCwgMCwgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNFbmVteUF0dGFja2luZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkud2FpdEZvckF0dGFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcblxuXG5cblxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cbiAgICAgICAgICAgICAgICBjYXNlIHNldHRpbmdzLnVzZVNhbml0eVBvdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5zYW5pdHlQb3Rpb25BbW91bnQgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteU9uU2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgc2hvd0dyYXBoaWNzKDAsIDAsIGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciwgNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtVXNlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllclNhbml0eSA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTYW5pdHkgPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVyU2FuaXR5ID49IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTYW5pdHkgPSBwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJTYW5pdHkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc2FuaXR5UG90aW9uQW1vdW50ID0gcGxheWVySW52ZW50b3J5TWVtb3J5LnNhbml0eVBvdGlvbkFtb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtVW5hdmFpbGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHNldHRpbmdzLnVzZVNvdWw6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc291bEFtb3VudCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15T25TY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHNob3dHcmFwaGljcyhmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXkgKyAxMCwgMCwgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yLCA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0l0ZW1Vc2VkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoID0gZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCAtIDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZW15U3RhdHNNZW1vcnkuZW5lbXlIZWFsdGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlIZWFsdGggPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5LnNvdWxBbW91bnQgPSBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc291bEFtb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtVW5hdmFpbGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSIsImltcG9ydCB7IHN0YWdlQWR2YW5jZSB9IGZyb20gXCIuL3N0YWdlQWR2YW5jZVwiO1xuaW1wb3J0IHsgcHJvbXB0Q29udHJvbGxlck1lbW9yeSwgZW5lbXlTdGF0c01lbW9yeSwgZmxvb3JCdWlsZGVyTWVtb3J5LCBzdGFnZSB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBzZXRGbG9vciB9IGZyb20gXCIuL3NldEZsb29yXCI7XG5pbXBvcnQgeyBzaG93SW5mbyB9IGZyb20gXCIuL3Nob3dJbmZvXCI7XG5pbXBvcnQgeyBzaG93R3JhcGhpY3MgfSBmcm9tIFwiLi9zaG93R3JhcGhpY3NcIjtcbmltcG9ydCB7IGludmVudG9yeSwgcGxheWVySW52ZW50b3J5TWVtb3J5IH0gZnJvbSBcIi4vaW52ZW50b3J5XCI7XG5pbXBvcnQgeyB1c2VJdGVtIH0gZnJvbSBcIi4vdXNlSXRlbVwiO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3NcIjtcblxuICAgIC8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG4gICAgLy9DbGFzcyB0aGF0IGNoZWNrcyB3aGF0J3Mgd3JpdHRlbi5cblxuXG5cbmV4cG9ydCBjbGFzcyBwcm9tcHRDaGVjayB7XG4gICAgY29uc3RydWN0b3IoY3VycmVudHN0YWdlOiBzdGFnZUFkdmFuY2UsIHNob3dEaWFsb2d1ZTogc2hvd0luZm8pIHtcblxuICAgICAgICBsZXQgcHJvbXB0O1xuICAgICAgICBsZXQgcHJvbXB0ZXI7XG4gICAgICAgIHByb21wdCA9ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JpdHRlbicpKS52YWx1ZTtcbiAgICAgICAgcHJvbXB0ZXIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dyaXR0ZW4nKSk7XG4gICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JpdHRlbicpKS52YWx1ZSA9IG51bGw7XG4gICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JpdHRlbicpKS5wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgICAgIGNvbnNvbGUubG9nKHByb21wdCk7XG5cbiAgICAgICAgaWYgKHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPT0gdHJ1ZSAmJiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LndhaXRGb3JBdHRhY2sgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocHJvbXB0LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5nb0Rvd246XG4gICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuZW5lbXlPblNjcmVlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpID09IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9TcHJhd2TFuiB3eWdyYW7EhSB0eWxrbyByYXpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc1ZpY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkud2FpdEZvckF0dGFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXlJc0FsaXZlID09IHRydWUgJiYgcGxheWVySW52ZW50b3J5TWVtb3J5LmtleUFtb3VudCA8IDEgJiYgY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpICE9IDAgJiYgY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpICE9IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0RpYWxvZ3VlLnNob3dJbmZvX2lzQmxvY2tlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXlJc0FsaXZlID09IHRydWUgJiYgcGxheWVySW52ZW50b3J5TWVtb3J5LmtleUFtb3VudCA+IDAgJiYgY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpICE9IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5LmtleUFtb3VudCA9IHBsYXllckludmVudG9yeU1lbW9yeS5rZXlBbW91bnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHNldEZsb29yKDEsIDAsIHN0YWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBzaG93R3JhcGhpY3MoMCwgMCwgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0Zsb29yU2hvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15SXNBbGl2ZSA9PSBmYWxzZSAmJiBjdXJyZW50c3RhZ2UuZ2V0Q3VycmVudFN0YWdlKCkgIT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgc2V0Rmxvb3IoMSwgMCwgc3RhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHNob3dHcmFwaGljcygwLCAwLCBmbG9vckJ1aWxkZXJNZW1vcnkuZmxvb3IsIDApO1xuICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0Zsb29yU2hvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Ugc2V0dGluZ3MuY2hlY2tFbmVteTpcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15SXNBbGl2ZT09dHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LmVuZW15T25TY3JlZW4gPT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IHNob3dHcmFwaGljcyhmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXksIDAsIGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciwgZmxvb3JCdWlsZGVyTWVtb3J5LmFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNFbmVteVNob3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5lbXlTdGF0c01lbW9yeS5lbmVteU9uU2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0VuZW15U2hvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15T25TY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXlJc0FsaXZlPT1mYWxzZSl7XG4gICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19pc0VuZW15U2hvd24oKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5jaGVja0l0ZW06XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbG9vckJ1aWxkZXJNZW1vcnkuaXRlbUlzT25Hcm91bmQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteU9uU2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LnJ1bW1hZ2VPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBzaG93R3JhcGhpY3MoMCwgZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW0sIGZsb29yQnVpbGRlck1lbW9yeS5mbG9vciwgZmxvb3JCdWlsZGVyTWVtb3J5LmFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtU2hvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHNldHRpbmdzLmNoZWNrUGxheWVyOlxuICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNQbGF5ZXJTdGF0U2hvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5jaGVja01pcnJvcjpcbiAgICAgICAgICAgICAgICAgICAgc2hvd0RpYWxvZ3VlLnNob3dJbmZvX2lzUGxheWVyUmVmbGVjdGlvblNob3duKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5hdHRhY2s6XG4gICAgICAgICAgICAgICAgICAgLy8gbmV3IFVzZUl0ZW1DbGFzcyhcIndlYXBvblwiKTtcbiAgICAgICAgICAgICAgICAgICBuZXcgdXNlSXRlbShzZXR0aW5ncy5hdHRhY2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy5waWNrVXBJdGVtOlxuICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LmVuZW15T25TY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb29yQnVpbGRlck1lbW9yeS5pdGVtSXNPbkdyb3VuZCA9PSB0cnVlICYmIGVuZW15U3RhdHNNZW1vcnkucnVtbWFnZU9wZW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5ydW1tYWdlT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW1Jc09uR3JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RGlhbG9ndWUuc2hvd0luZm9faXNJdGVtUGlja2VkVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBzaG93R3JhcGhpY3MoMCwgMCwgZmxvb3JCdWlsZGVyTWVtb3J5LmZsb29yLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkud2VhcG9uTGV2ZWwgPD0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCA9IE1hdGgucm91bmQoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRzdGFnZS5nZXRDdXJyZW50U3RhZ2UoKSkgLyAyICsgMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCA+PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5zaGllbGRMZXZlbCA8PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc2hpZWxkTGV2ZWwgPSBNYXRoLnJvdW5kKChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50c3RhZ2UuZ2V0Q3VycmVudFN0YWdlKCkpIC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc2hpZWxkTGV2ZWwgPj0gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS5zaGllbGRMZXZlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkua2V5QW1vdW50ID0gcGxheWVySW52ZW50b3J5TWVtb3J5LmtleUFtb3VudCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5yaW5nTGV2ZWwgPD0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5LnJpbmdMZXZlbCA9IE1hdGgucm91bmQoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRzdGFnZS5nZXRDdXJyZW50U3RhZ2UoKSkgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5yaW5nTGV2ZWwgPj0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS5yaW5nTGV2ZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlYWx0aFBvdGlvbkFtb3VudCA9IHBsYXllckludmVudG9yeU1lbW9yeS5oZWFsdGhQb3Rpb25BbW91bnQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS5zb3VsQW1vdW50ID0gcGxheWVySW52ZW50b3J5TWVtb3J5LnNvdWxBbW91bnQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS5zYW5pdHlQb3Rpb25BbW91bnQgPSBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuc2FuaXR5UG90aW9uQW1vdW50ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuYXJtb3JMZXZlbCA8PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuYXJtb3JMZXZlbCA9IE1hdGgucm91bmQoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRzdGFnZS5nZXRDdXJyZW50U3RhZ2UoKSkgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5hcm1vckxldmVsID49IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuYXJtb3JMZXZlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVySW52ZW50b3J5TWVtb3J5Lmdsb3Zlc0xldmVsIDw9IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckludmVudG9yeU1lbW9yeS5nbG92ZXNMZXZlbCA9IE1hdGgucm91bmQoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRzdGFnZS5nZXRDdXJyZW50U3RhZ2UoKSkgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckludmVudG9yeU1lbW9yeS5nbG92ZXNMZXZlbCA+PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5Lmdsb3Zlc0xldmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuaGVsbWV0TGV2ZWwgPD0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlbG1ldExldmVsID0gTWF0aC5yb3VuZCgoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudHN0YWdlLmdldEN1cnJlbnRTdGFnZSgpKSAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2Ugc2V0dGluZ3Mub3BlblBvdGlvbkJhZzpcbiAgICAgICAgICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5wb3Rpb25CYWNrT3BlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNob3dEaWFsb2d1ZS5zaG93SW5mb19yZWFkeUZvclBvdGlvblVzYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy51c2VTYW5pdHlQb3Rpb246XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LnBvdGlvbkJhY2tPcGVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuaXRlbVRvVXNlID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV3IFVzZUl0ZW1DbGFzcyhcInNhbml0eVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyB1c2VJdGVtKHNldHRpbmdzLnVzZVNhbml0eVBvdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LnBvdGlvbkJhY2tPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIHNldHRpbmdzLnVzZVNvdWw6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LnBvdGlvbkJhY2tPcGVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuaXRlbVRvVXNlID0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV3IFVzZUl0ZW1DbGFzcyhcInNvdWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgdXNlSXRlbShzZXR0aW5ncy51c2VTb3VsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkucG90aW9uQmFja09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICAgICAgY2FzZSBzZXR0aW5ncy51c2VIZWFsdGhQb3Rpb246XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LnBvdGlvbkJhY2tPcGVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U3RhdHNNZW1vcnkuaXRlbVRvVXNlID0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV3IFVzZUl0ZW1DbGFzcyhcImhlYWx0aFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyB1c2VJdGVtKHNldHRpbmdzLnVzZUhlYWx0aFBvdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteVN0YXRzTWVtb3J5LnBvdGlvbkJhY2tPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3IGludmVudG9yeShwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuaGFzTWlycm9yLCBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuYXJtb3JMZXZlbCwgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlbG1ldExldmVsLCBwbGF5ZXJJbnZlbnRvcnlNZW1vcnkuZ2xvdmVzTGV2ZWwsIHBsYXllckludmVudG9yeU1lbW9yeS5rZXlBbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS53ZWFwb25MZXZlbCwgcGxheWVySW52ZW50b3J5TWVtb3J5LmhlYWx0aFBvdGlvbkFtb3VudCwgcGxheWVySW52ZW50b3J5TWVtb3J5LnNvdWxBbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS5zYW5pdHlQb3Rpb25BbW91bnQsIHBsYXllckludmVudG9yeU1lbW9yeS5yaW5nTGV2ZWwsIHBsYXllckludmVudG9yeU1lbW9yeS5zaGllbGRMZXZlbCk7XG4gICAgICAgIGlmIChlbmVteVN0YXRzTWVtb3J5LmVuZW15SGVhbHRoIDwgMikge1xuICAgICAgICAgICAgZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aCA9IDE7XG4gICAgICAgICAgICBmbG9vckJ1aWxkZXJNZW1vcnkuZW5lbXlJc0FsaXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcHJvbXB0ZXIuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIHByb21wdDtcbiAgICB9XG59IiwiIC8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG5cbmltcG9ydCB7IGRpYWxvZ3VlYmFuaywgZmxvb3JCdWlsZGVyTWVtb3J5LCBwbGF5ZXJTdGF0c01lbW9yeSwgZW5lbXlTdGF0c01lbW9yeSwgcHJvbXB0Q29udHJvbGxlck1lbW9yeSB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBzZXR0aW5ncyBmcm9tIFwiLi9zZXR0aW5nc1wiXG4gICAgLy9DbGFzcyBzaG93aW5nIHRoZSB0ZXh0IGZvciBteSB0ZXh0IGJhc2VkIGdhbWUuXG4gICAgZXhwb3J0IGNsYXNzIHNob3dJbmZvIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgbGV0IHNob3duVGV4dCA9IFwiXCI7XG4gICAgICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb21wdEFsbG93ZWRcIik7XG4gICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGg8c2V0dGluZ3MucGxheWVySXNEZWFkKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIwXTtcbiAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgICBzaG93SW5mb19pc0Zsb29yU2hvd24oKTogdm9pZCB7XG4gICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBzaG93blRleHQgPSBkaWFsb2d1ZWJhbmsubW92aW5nUXVvdGVzW2Zsb29yQnVpbGRlck1lbW9yeS5tb3ZlXSArIGRpYWxvZ3VlYmFuay5tb3ZpbmdQbGFjZVtmbG9vckJ1aWxkZXJNZW1vcnkuZmxvb3JdICsgZGlhbG9ndWViYW5rLmFjdGlvbnNbMV0gKyBkaWFsb2d1ZWJhbmsuZW5lbXlGb3JtW2Zsb29yQnVpbGRlck1lbW9yeS5lbmVteV0gKyBkaWFsb2d1ZWJhbmsuYWN0aW9uc1sxMF0gKyBkaWFsb2d1ZWJhbmsuaXRlbUZvcm1bZmxvb3JCdWlsZGVyTWVtb3J5Lml0ZW1dOyAgICAgICAgIFxuIFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG93blRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gcHJvbXB0XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aDxzZXR0aW5ncy5wbGF5ZXJJc0RlYWQpe1xuICAgICAgICAgICAgICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbiAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXcgc2hvd0luZm8oMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0RpYWxvZ3VlLnNob3dJbmZvX2lzRmxvb3JTaG93bigpO1xuXG4gICAgICAgIHNob3dJbmZvX2lzUGxheWVyUmVmbGVjdGlvblNob3duKCk6IHZvaWQge1xuICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgc2hvd25UZXh0ID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMTNdICsgZGlhbG9ndWViYW5rLnNhbml0eUZvcm1QbGF5ZXJbcGxheWVyU3RhdHNNZW1vcnkucGxheWVyU2FuaXR5XTsgICAgICAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSB0cnVlOyBcbiAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9tcHRBbGxvd2VkXCIpO1xuICAgICAgICAgICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoPHNldHRpbmdzLnBsYXllcklzRGVhZCl7XG4gICAgICAgICAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1syMF07XG4gICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9LCBzaG93blRleHQubGVuZ3RoICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuXG4gICAgICAgfVxuXG5cblxuICAgICAgIHNob3dJbmZvX2lzUGxheWVyU3RhdFNob3duKCk6IHZvaWQge1xuICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gbnVsbDtcbiAgICAgICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5kZWZlbnNlRm9ybVBsYXllcltwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJEZWZlbnNlXSArIGRpYWxvZ3VlYmFuay5zdHJlbmd0aEZvcm1QbGF5ZXJbcGxheWVyU3RhdHNNZW1vcnkucGxheWVyU3RyZW5ndGhdICsgZGlhbG9ndWViYW5rLmRleHRlcml0eUZvcm1QbGF5ZXJbcGxheWVyU3RhdHNNZW1vcnkucGxheWVyRGV4dGVyaXR5XSArIGRpYWxvZ3VlYmFuay5oZWFsdGhGb3JtUGxheWVyW3BsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aF07ICAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoPHNldHRpbmdzLnBsYXllcklzRGVhZCl7XG4gICAgICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgICAgIH0gXG4gICAgICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbiAgIH1cblxuXG4gICBzaG93SW5mb19pc0l0ZW1TaG93bigpOiB2b2lkIHtcbiAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gbnVsbDtcbiAgICBsZXQgc2hvd25UZXh0ID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMTJdICsgZGlhbG9ndWViYW5rLml0ZW1Gb3JtW2Zsb29yQnVpbGRlck1lbW9yeS5pdGVtXTsgICAgICAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3duVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgY29uc29sZS5sb2coXCJwcm9tcHRBbGxvd2VkXCIpO1xuICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aDxzZXR0aW5ncy5wbGF5ZXJJc0RlYWQpe1xuICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1syMF07XG4gICAgICAgICB9IFxuICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbn1cblxuXG5zaG93SW5mb19pc0VuZW15U2hvd24oKTogdm9pZCB7XG4gICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzExXSArIGRpYWxvZ3VlYmFuay5lbmVteUZvcm1bZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15XSArIGRpYWxvZ3VlYmFuay5kZWZlbnNlRm9ybUVuZW15W2VuZW15U3RhdHNNZW1vcnkuZW5lbXlEZWZlbnNlXSArIGRpYWxvZ3VlYmFuay5zdHJlbmd0aEZvcm1FbmVteVtlbmVteVN0YXRzTWVtb3J5LmVuZW15U3RyZW5ndGhdICsgZGlhbG9ndWViYW5rLmRleHRlcml0eUZvcm1FbmVteVtlbmVteVN0YXRzTWVtb3J5LmVuZW15RGV4dGVyaXR5XSArIGRpYWxvZ3VlYmFuay5oZWFsdGhGb3JtRW5lbXlbZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aF07ICAgICAgICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG93blRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSB0cnVlOyBcbiAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGg8c2V0dGluZ3MucGxheWVySXNEZWFkKXtcbiAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgfSBcbiAgICB9LCBzaG93blRleHQubGVuZ3RoICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuXG59XG5cblxuc2hvd0luZm9faXNJdGVtVXNlZCgpOiB2b2lkIHtcbiAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gbnVsbDtcbiAgICBsZXQgc2hvd25UZXh0ID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMTRdICsgZGlhbG9ndWViYW5rLml0ZW1Vc2FnZVtlbmVteVN0YXRzTWVtb3J5Lml0ZW1Ub1VzZV0gOyAgICAgICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MICs9IHNob3duVGV4dFtpXSB9LCBpICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gdHJ1ZTsgXG4gICAgICAgICBjb25zb2xlLmxvZyhcInByb21wdEFsbG93ZWRcIik7XG4gICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoPHNldHRpbmdzLnBsYXllcklzRGVhZCl7XG4gICAgICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIwXTtcbiAgICAgICAgIH0gXG4gICAgfSwgc2hvd25UZXh0Lmxlbmd0aCAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcblxufVxuXG5cbnNob3dJbmZvX2lzSXRlbVVuYXZhaWxhYmxlKCk6IHZvaWQge1xuICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBudWxsO1xuICAgIGxldCBzaG93blRleHQgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1sxNl0gKyBkaWFsb2d1ZWJhbmsuaXRlbUZvcm1bZW5lbXlTdGF0c01lbW9yeS5pdGVtVG9Vc2VdOyAgICAgICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MICs9IHNob3duVGV4dFtpXSB9LCBpICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gdHJ1ZTsgXG4gICAgICAgICBjb25zb2xlLmxvZyhcInByb21wdEFsbG93ZWRcIik7XG4gICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoPHNldHRpbmdzLnBsYXllcklzRGVhZCl7XG4gICAgICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIwXTtcbiAgICAgICAgIH0gXG4gICAgfSwgc2hvd25UZXh0Lmxlbmd0aCAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcblxufVxuXG5cbnNob3dJbmZvX3JlYWR5Rm9yUG90aW9uVXNhZ2UoKTogdm9pZCB7XG4gICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5pdGVtQ2hvaWNlUHJlc2VudGVkWzFdOyAgICAgICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hvd25UZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MICs9IHNob3duVGV4dFtpXSB9LCBpICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gdHJ1ZTsgXG4gICAgICAgICBjb25zb2xlLmxvZyhcInByb21wdEFsbG93ZWRcIik7XG4gICAgICAgICBpZiAocGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoPHNldHRpbmdzLnBsYXllcklzRGVhZCl7XG4gICAgICAgICAgICBwcm9tcHRDb250cm9sbGVyTWVtb3J5LmFsbG93UHJvbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIwXTtcbiAgICAgICAgIH0gXG4gICAgfSwgc2hvd25UZXh0Lmxlbmd0aCAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcblxufVxuXG5cbnNob3dJbmZvX2lzSXRlbVBpY2tlZFVwKCk6IHZvaWQge1xuICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBudWxsO1xuICAgIGxldCBzaG93blRleHQgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1s3XSArIGRpYWxvZ3VlYmFuay5pdGVtRm9ybVtmbG9vckJ1aWxkZXJNZW1vcnkuaXRlbV07ICAgICAgICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG93blRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSB0cnVlOyBcbiAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGg8c2V0dGluZ3MucGxheWVySXNEZWFkKXtcbiAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgfSBcbiAgICB9LCBzaG93blRleHQubGVuZ3RoICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuXG59XG5cblxuc2hvd0luZm9faXNCbG9ja2VkKCk6IHZvaWQge1xuICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBudWxsO1xuICAgIGxldCBzaG93blRleHQgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1sxN107ICAgICAgICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG93blRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSB0cnVlOyBcbiAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGg8c2V0dGluZ3MucGxheWVySXNEZWFkKXtcbiAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgfSBcbiAgICB9LCBzaG93blRleHQubGVuZ3RoICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuXG59XG5cblxuc2hvd0luZm9faXNTd29yZFVzZWQoKTogdm9pZCB7XG4gICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzE4XSArIGRpYWxvZ3VlYmFuay5lbmVteUZvcm1bZmxvb3JCdWlsZGVyTWVtb3J5LmVuZW15XSArIGRpYWxvZ3VlYmFuay5oZWFsdGhGb3JtRW5lbXlbZW5lbXlTdGF0c01lbW9yeS5lbmVteUhlYWx0aF07ICAgICAgICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG93blRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgKz0gc2hvd25UZXh0W2ldIH0sIGkgKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSB0cnVlOyBcbiAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0QWxsb3dlZFwiKTtcbiAgICAgICAgIGlmIChwbGF5ZXJTdGF0c01lbW9yeS5wbGF5ZXJIZWFsdGg8c2V0dGluZ3MucGxheWVySXNEZWFkKXtcbiAgICAgICAgICAgIHByb21wdENvbnRyb2xsZXJNZW1vcnkuYWxsb3dQcm9tcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMjBdO1xuICAgICAgICAgfSBcbiAgICB9LCBzaG93blRleHQubGVuZ3RoICogcHJvbXB0Q29udHJvbGxlck1lbW9yeS50ZXh0U3BlZWQpO1xuXG59XG5cblxuc2hvd0luZm9faXNFbmVteUF0dGFja2luZygpOiB2b2lkIHtcbiAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSkuaW5uZXJIVE1MID0gbnVsbDtcbiAgICBsZXQgc2hvd25UZXh0ID0gZGlhbG9ndWViYW5rLmFjdGlvbnNbMTldICsgZGlhbG9ndWViYW5rLmhlYWx0aEZvcm1QbGF5ZXJbcGxheWVyU3RhdHNNZW1vcnkucGxheWVySGVhbHRoXTsgICAgICAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3duVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgY29uc29sZS5sb2coXCJwcm9tcHRBbGxvd2VkXCIpO1xuICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aDxzZXR0aW5ncy5wbGF5ZXJJc0RlYWQpe1xuICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1syMF07XG4gICAgICAgICB9IFxuICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbn1cblxuXG5zaG93SW5mb19pc1BsYXllckRlYWQoKTogdm9pZCB7XG4gICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIwXTsgICAgICAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3duVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgY29uc29sZS5sb2coXCJwcm9tcHRBbGxvd2VkXCIpO1xuICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aDxzZXR0aW5ncy5wbGF5ZXJJc0RlYWQpe1xuICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1syMF07XG4gICAgICAgICB9IFxuICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbn1cblxuXG5zaG93SW5mb19pc1ZpY3RvcnkoKTogdm9pZCB7XG4gICAgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCA9IG51bGw7XG4gICAgbGV0IHNob3duVGV4dCA9IGRpYWxvZ3VlYmFuay5hY3Rpb25zWzIxXTsgICAgICAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3duVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykpLmlubmVySFRNTCArPSBzaG93blRleHRbaV0gfSwgaSAqIHByb21wdENvbnRyb2xsZXJNZW1vcnkudGV4dFNwZWVkKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IHRydWU7IFxuICAgICAgICAgY29uc29sZS5sb2coXCJwcm9tcHRBbGxvd2VkXCIpO1xuICAgICAgICAgaWYgKHBsYXllclN0YXRzTWVtb3J5LnBsYXllckhlYWx0aDxzZXR0aW5ncy5wbGF5ZXJJc0RlYWQpe1xuICAgICAgICAgICAgcHJvbXB0Q29udHJvbGxlck1lbW9yeS5hbGxvd1Byb21wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpKS5pbm5lckhUTUwgPSBkaWFsb2d1ZWJhbmsuYWN0aW9uc1syMF07XG4gICAgICAgICB9IFxuICAgIH0sIHNob3duVGV4dC5sZW5ndGggKiBwcm9tcHRDb250cm9sbGVyTWVtb3J5LnRleHRTcGVlZCk7XG5cbn1cblxuXG5cblxuICAgIH1cblxuIiwiIGltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbiBpbXBvcnQge3N0YWdlQWR2YW5jZX0gZnJvbSAnLi9zdGFnZUFkdmFuY2UnO1xuIGltcG9ydCB7cGxheWVyU3RhdHN9IGZyb20gJy4vcGxheWVyU3RhdHMnO1xuIGltcG9ydCB7cGxheWVySW52ZW50b3J5fSBmcm9tICcuL3BsYXllckludmVudG9yeSc7XG4gaW1wb3J0IHtwcm9tcHRDb250cm9sbGVyfSBmcm9tICcuL3Byb21wdENvbnRyb2xsZXInO1xuIGltcG9ydCB7Y29tYmF0Q29udHJvbGxlcn0gZnJvbSAnLi9jb21iYXRDb250cm9sbGVyJztcbmltcG9ydCB7ZW5lbXlTdGF0c30gZnJvbSAnLi9lbmVteVN0YXRzJztcbmltcG9ydCB7Zmxvb3JCdWlsZGVyfSBmcm9tICcuL2Zsb29yQnVpbGRlcic7XG5pbXBvcnQge2RpYWxvZ3VlfSBmcm9tICcuL2RpYWxvZ3VlJztcbmltcG9ydCB7IHNldEZsb29yIH0gZnJvbSAnLi9zZXRGbG9vcic7XG5pbXBvcnQgeyBwcm9tcHRDaGVjayB9IGZyb20gJy4vcHJvbXB0Q2hlY2snO1xuaW1wb3J0IHsgc2hvd0luZm8gfSBmcm9tICcuL3Nob3dJbmZvJztcbmltcG9ydCAqIGFzIHNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzXCI7XG5cblxuICAgIC8vRmxvb3IgQnVpbGRpbmcgYW5kIHByb2dyZXNzaW9uXG4gICBleHBvcnQgbGV0IGZsb29yQnVpbGRlck1lbW9yeSA9IG5ldyBmbG9vckJ1aWxkZXIoMCxudWxsLDAsbnVsbCwwLG51bGwsMCxudWxsLCBmYWxzZSwgZmFsc2UsIDApO1xuXG4gICAgLy9sZXQgc3RhZ2UgPSAxO1xuICAgIGV4cG9ydCBsZXQgc3RhZ2UgPSBuZXcgc3RhZ2VBZHZhbmNlKHNldHRpbmdzLnN0YXJ0aW5nU3RhZ2UpO1xuXG4gICAgLy9FbmVteSBTdGF0c1xuICAgIGV4cG9ydCAgbGV0IGVuZW15U3RhdHNNZW1vcnkgPSBuZXcgZW5lbXlTdGF0cygxLDEsMSwxLGZhbHNlLDAsZmFsc2UsZmFsc2UpO1xuXG4gICAgLy9TdGFydGluZyBQbGF5ZXIgU3RhdHMgLSBjaGFuZ2FibGUgdmlhIHNldHRpbmdzLnRzOlxuICAgIGV4cG9ydCAgbGV0IHBsYXllclN0YXRzTWVtb3J5ID0gbmV3IHBsYXllclN0YXRzKHNldHRpbmdzLnN0YXJ0aW5nUGxheWVySGVhbHRoLCBzZXR0aW5ncy5zdGFydGluZ1BsYXllckRlZmVuc2UsIHNldHRpbmdzLnN0YXJ0aW5nUGxheWVyU3RyZW5ndGgsIHNldHRpbmdzLnN0YXJ0aW5nUGxheWVyRGV4dGVyaXR5LCBzZXR0aW5ncy5zdGFydGluZ1BsYXllckRlZmVuc2VEZWJ1ZmYsIHNldHRpbmdzLnN0YXJ0aW5nUGxheWVyU3RyZW5ndGhEZWJ1ZmYsIHNldHRpbmdzLnN0YXJ0aW5nUGxheWVyRGV4dGVyaXR5RGVidWZmLCBzZXR0aW5ncy5zdGFydGluZ1BsYXllclNhbml0eSwgc2V0dGluZ3Muc3RhcnRpbmdQbGF5ZXJNb3JhbGl0eSk7XG5cbiAgICAvL1Byb21wdCBDb250cm9sbGVyc1xuICAgIGV4cG9ydCBsZXQgcHJvbXB0Q29udHJvbGxlck1lbW9yeSA9IG5ldyBwcm9tcHRDb250cm9sbGVyKHRydWUsIGZhbHNlLCBzZXR0aW5ncy50ZXh0U3BlZWRQcm9tcHQpO1xuXG4gICAgLy9Db21iYXQgQ29udHJvbGxlcnMgXG4gICAgZXhwb3J0IGxldCBjb21iYXRDb250cm9sbGVyTWVtb3J5ID0gbmV3IGNvbWJhdENvbnRyb2xsZXIoMCwwKTtcblxuICAgIC8vQWxsIERpYWxvZ3Vlc1xuICAgIGV4cG9ydCAgbGV0IGRpYWxvZ3VlYmFuayA9IG5ldyBkaWFsb2d1ZSgpO1xuXG4gICAgLy9TaG93aW5nIHRoZSBkaWFsb2d1ZVxuICAgIGV4cG9ydCBsZXQgc2hvd0RpYWxvZ3VlID0gbmV3IHNob3dJbmZvKCk7XG5cbiB3aW5kb3cub25sb2FkID0gKCkgPT4ge1xuXG4gICAgLy9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cbiAgICAvL1NvdW5kdHJhY2tcbiAgICBsZXQgYW1iaWVudCA9IDxIVE1MVmlkZW9FbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW1iaWVudFwiKTtcbiAgICB3aW5kb3cub25tb3VzZWRvd24gPSBmdW5jdGlvbiAobW91c2VFdmVudDogYW55KSB7XG4gICAgICAgIGFtYmllbnQucGxheSgpO1xuICAgIH07XG5cbiAgICAvL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuICAgIC8vSW50ZXJhY3Rpb24gd2l0aCB0aGUgZ2FtZS5cblxuICAgIGNvbnN0IHByb2NlZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2NlZWRcIik7XG4gICAgcHJvY2VlZD8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHsgbmV3IHByb21wdENoZWNrKHN0YWdlLCBzaG93RGlhbG9ndWUpIH0pO1xuXG4gICAgd2luZG93Lm9ua2V5ZG93biA9IChldjogS2V5Ym9hcmRFdmVudCk6IGFueSA9PiB7XG4gICAgICAgIGlmIChldi5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICBuZXcgcHJvbXB0Q2hlY2soc3RhZ2UsIHNob3dEaWFsb2d1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbi8vVG9Ebywgd2hhdCdzIG5lZWRlZDpcbi8vUmFuZG9tIG5vbi1lbmVteSBlbmNvdW50ZXJzLlxuLy9SYW5kb20gbm9uLWVuZW15IGV2ZW50cy5cbi8vQ29tYmF0IHN5c3RlbS4gLSBEb25lLlxuLy9FcXVpcCBzeXN0ZW0uIChlcXVpcHBpbmcgYXJtb3IgYW5kIHdlYXBvbnMpIC0gRG9uZS5cbi8vUG90aW9uIHN5c3RlbS4gLSBEb25lLlxuLy9BY2Nlc3NvcnkgU3lzdGVtLiAtIERvbmUuXG5cbi8vVG9EbywgZXh0cmEgZmVhdHVyZXM6XG4vL0Egd2F5IHRvIHNwZWFrIHRvIGVuZW1pZXMuICg/KVxuLy9TYW5pdHkgRWZmZWN0cy4gKD8pXG4vL0Vhc3RlciBFZ2dzLiAoPylcbi8vTW9yYWwgY2hvaWNlcy4gKD8pXG4vL1NhdmluZyB0aGUgcHJldmlvdXMgbG9jYXRpb25zKD8pXG4vL0Egd2F5IHRvIHJldHVybiB0byBwcmV2aW91cyBsb2NhdGlvbnMuKD8pXG5cblxuLy9EbyB6cm9iaWVuaWEgKG1haiA3KVxuLy8xLlN5c3RlbSB3YWxraSAtIHpyb2Jpb25lIDopXG4vLzIuU3lzdGVtIHByemVkbWlvdMOzdyAtIHpyb2Jpb25lIDopXG4vLzMuWnJvYmllbmllIG9iaWVrdG93byAtIHpyb2Jpb25lIDopXG5cblxuLy9EbyB6cm9iaWVuaWEgKG1haiAyMSk6XG4vLzEuS2xhc2UgdyByw7PFvG55Y2ggcGxpa2FjaC4gLSB6cm9iaW9uZSA6KVxuLy8yLlBvZHBpxJljaWUgd2VicGFja2EgLSBhdXRvbWF0eWN6bmllIHdpZWxkb3dhbmllLiBodHRwczovL3dlYnBhY2suanMub3JnL2d1aWRlcy90eXBlc2NyaXB0LyAtIHpyb2Jpb25lIDopXG4vLzMuVyBzaG93SW5mbyAtIHJvemR6aWVsacSHIGkgenJvYmnEhyBub3dlIGtsYXN5LiAtIHpyb2Jpb25lIDopXG4vLzQuTW/FvGxpd2/Fm2Mgd3lncmFuaWEgZ3J5Li0gVmljdG9yeSBTY3JlZW4uIC0genJvYmlvbmUgOilcblxuXG4vL0RvIHpyb2JpZW5pYSAoMjgvbWFqYSAvIDQgY3plcndjYSlcbi8vMS5aZXJhIGplZHlua2kgPSBUcnVlL0ZhbHNlIC0genJvYmlvbmUgOilcbiAgICAvL1ptaWVubmUgZG8gem1pYW55OlxuICAgIC8vYWxsb3dQcm9tcHQgLSB6cm9iaW9uZVxuICAgIC8vd2FpdEZvckF0dGFjayAtIHpyb2Jpb25lXG4gICAgLy9lbmVteU9uU2NyZWVuIC0genJvYmlvbmVcbiAgICAvL2VuZW15SXNBbGl2ZSAtIHpyb2Jpb25lXG4gICAgLy9pdGVtSXNPbkdyb3VuZCAtIHpyb2Jpb25lXG4gICAgLy9ydW1tYWdlT3BlbiAtIHpyb2Jpb25lXG4gICAgLy9wb3Rpb25CYWNrT3BlbiAtIHpyb2Jpb25lXG4gICAgLy9cbi8vMi5OaWUgdcW8eXdhxIcgc3RhxYJ5Y2ggbGljemJvd3ljaC5cbi8vMy5DYXNlIHptaWVubnltaSAtIG5pZSBsaXRlcmthbWkuIC0genJvYmlvbmUgOilcbi8vNC5Sb3pkemllbGnEhyBrbGFzeSBuYSBrb25zdHJ1a3RvciBpIG1ldG9keS5cbi8vNS5BZGQgU2FuaXR5L01vcmFsaXR5IG1lY2hhbmljcy4gLSB6cm9iaW9uZSA6KSJdLCJzb3VyY2VSb290IjoiIn0=